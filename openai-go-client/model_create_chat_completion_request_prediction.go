/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateChatCompletionRequestPrediction - Configuration for a [Predicted Output](/docs/guides/predicted-outputs), which can greatly improve response times when large parts of the model response are known ahead of time. This is most common when you are regenerating a file with only minor changes to most of the content. 
type CreateChatCompletionRequestPrediction struct {
	PredictionContent *PredictionContent
}

// PredictionContentAsCreateChatCompletionRequestPrediction is a convenience function that returns PredictionContent wrapped in CreateChatCompletionRequestPrediction
func PredictionContentAsCreateChatCompletionRequestPrediction(v *PredictionContent) CreateChatCompletionRequestPrediction {
	return CreateChatCompletionRequestPrediction{
		PredictionContent: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateChatCompletionRequestPrediction) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into PredictionContent
	err = newStrictDecoder(data).Decode(&dst.PredictionContent)
	if err == nil {
		jsonPredictionContent, _ := json.Marshal(dst.PredictionContent)
		if string(jsonPredictionContent) == "{}" { // empty struct
			dst.PredictionContent = nil
		} else {
			if err = validator.Validate(dst.PredictionContent); err != nil {
				dst.PredictionContent = nil
			} else {
				match++
			}
		}
	} else {
		dst.PredictionContent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PredictionContent = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateChatCompletionRequestPrediction)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateChatCompletionRequestPrediction)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateChatCompletionRequestPrediction) MarshalJSON() ([]byte, error) {
	if src.PredictionContent != nil {
		return json.Marshal(&src.PredictionContent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateChatCompletionRequestPrediction) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.PredictionContent != nil {
		return obj.PredictionContent
	}

	// all schemas are nil
	return nil
}

type NullableCreateChatCompletionRequestPrediction struct {
	value *CreateChatCompletionRequestPrediction
	isSet bool
}

func (v NullableCreateChatCompletionRequestPrediction) Get() *CreateChatCompletionRequestPrediction {
	return v.value
}

func (v *NullableCreateChatCompletionRequestPrediction) Set(val *CreateChatCompletionRequestPrediction) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateChatCompletionRequestPrediction) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateChatCompletionRequestPrediction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateChatCompletionRequestPrediction(val *CreateChatCompletionRequestPrediction) *NullableCreateChatCompletionRequestPrediction {
	return &NullableCreateChatCompletionRequestPrediction{value: val, isSet: true}
}

func (v NullableCreateChatCompletionRequestPrediction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateChatCompletionRequestPrediction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


