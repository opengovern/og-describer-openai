/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RealtimeClientEventConversationItemCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeClientEventConversationItemCreate{}

// RealtimeClientEventConversationItemCreate Add a new Item to the Conversation's context, including messages, function calls, and function call responses. This event can be used both to populate a \"history\" of the conversation and to add new items mid-stream, but has the current limitation that it cannot populate assistant audio messages. If successful, the server will respond with a `conversation.item.created` event, otherwise an `error` event will be sent.
type RealtimeClientEventConversationItemCreate struct {
	// Optional client-generated ID used to identify this event.
	EventId *string `json:"event_id,omitempty"`
	// The event type, must be `conversation.item.create`.
	Type string `json:"type"`
	// The ID of the preceding item after which the new item will be inserted. If not set, the new item will be appended to the end of the conversation. If set, it allows an item to be inserted mid-conversation. If the ID cannot be found, an error will be returned and the item will not be added.
	PreviousItemId *string `json:"previous_item_id,omitempty"`
	Item RealtimeConversationItem `json:"item"`
}

type _RealtimeClientEventConversationItemCreate RealtimeClientEventConversationItemCreate

// NewRealtimeClientEventConversationItemCreate instantiates a new RealtimeClientEventConversationItemCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeClientEventConversationItemCreate(type_ string, item RealtimeConversationItem) *RealtimeClientEventConversationItemCreate {
	this := RealtimeClientEventConversationItemCreate{}
	this.Type = type_
	this.Item = item
	return &this
}

// NewRealtimeClientEventConversationItemCreateWithDefaults instantiates a new RealtimeClientEventConversationItemCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeClientEventConversationItemCreateWithDefaults() *RealtimeClientEventConversationItemCreate {
	this := RealtimeClientEventConversationItemCreate{}
	return &this
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *RealtimeClientEventConversationItemCreate) GetEventId() string {
	if o == nil || IsNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeClientEventConversationItemCreate) GetEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *RealtimeClientEventConversationItemCreate) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *RealtimeClientEventConversationItemCreate) SetEventId(v string) {
	o.EventId = &v
}

// GetType returns the Type field value
func (o *RealtimeClientEventConversationItemCreate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RealtimeClientEventConversationItemCreate) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RealtimeClientEventConversationItemCreate) SetType(v string) {
	o.Type = v
}

// GetPreviousItemId returns the PreviousItemId field value if set, zero value otherwise.
func (o *RealtimeClientEventConversationItemCreate) GetPreviousItemId() string {
	if o == nil || IsNil(o.PreviousItemId) {
		var ret string
		return ret
	}
	return *o.PreviousItemId
}

// GetPreviousItemIdOk returns a tuple with the PreviousItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeClientEventConversationItemCreate) GetPreviousItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.PreviousItemId) {
		return nil, false
	}
	return o.PreviousItemId, true
}

// HasPreviousItemId returns a boolean if a field has been set.
func (o *RealtimeClientEventConversationItemCreate) HasPreviousItemId() bool {
	if o != nil && !IsNil(o.PreviousItemId) {
		return true
	}

	return false
}

// SetPreviousItemId gets a reference to the given string and assigns it to the PreviousItemId field.
func (o *RealtimeClientEventConversationItemCreate) SetPreviousItemId(v string) {
	o.PreviousItemId = &v
}

// GetItem returns the Item field value
func (o *RealtimeClientEventConversationItemCreate) GetItem() RealtimeConversationItem {
	if o == nil {
		var ret RealtimeConversationItem
		return ret
	}

	return o.Item
}

// GetItemOk returns a tuple with the Item field value
// and a boolean to check if the value has been set.
func (o *RealtimeClientEventConversationItemCreate) GetItemOk() (*RealtimeConversationItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Item, true
}

// SetItem sets field value
func (o *RealtimeClientEventConversationItemCreate) SetItem(v RealtimeConversationItem) {
	o.Item = v
}

func (o RealtimeClientEventConversationItemCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeClientEventConversationItemCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventId) {
		toSerialize["event_id"] = o.EventId
	}
	toSerialize["type"] = o.Type
	if !IsNil(o.PreviousItemId) {
		toSerialize["previous_item_id"] = o.PreviousItemId
	}
	toSerialize["item"] = o.Item
	return toSerialize, nil
}

func (o *RealtimeClientEventConversationItemCreate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"item",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRealtimeClientEventConversationItemCreate := _RealtimeClientEventConversationItemCreate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRealtimeClientEventConversationItemCreate)

	if err != nil {
		return err
	}

	*o = RealtimeClientEventConversationItemCreate(varRealtimeClientEventConversationItemCreate)

	return err
}

type NullableRealtimeClientEventConversationItemCreate struct {
	value *RealtimeClientEventConversationItemCreate
	isSet bool
}

func (v NullableRealtimeClientEventConversationItemCreate) Get() *RealtimeClientEventConversationItemCreate {
	return v.value
}

func (v *NullableRealtimeClientEventConversationItemCreate) Set(val *RealtimeClientEventConversationItemCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeClientEventConversationItemCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeClientEventConversationItemCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeClientEventConversationItemCreate(val *RealtimeClientEventConversationItemCreate) *NullableRealtimeClientEventConversationItemCreate {
	return &NullableRealtimeClientEventConversationItemCreate{value: val, isSet: true}
}

func (v NullableRealtimeClientEventConversationItemCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeClientEventConversationItemCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


