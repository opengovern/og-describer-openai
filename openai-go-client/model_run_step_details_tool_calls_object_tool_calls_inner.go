/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// RunStepDetailsToolCallsObjectToolCallsInner - struct for RunStepDetailsToolCallsObjectToolCallsInner
type RunStepDetailsToolCallsObjectToolCallsInner struct {
	RunStepDetailsToolCallsCodeObject *RunStepDetailsToolCallsCodeObject
	RunStepDetailsToolCallsFileSearchObject *RunStepDetailsToolCallsFileSearchObject
	RunStepDetailsToolCallsFunctionObject *RunStepDetailsToolCallsFunctionObject
}

// RunStepDetailsToolCallsCodeObjectAsRunStepDetailsToolCallsObjectToolCallsInner is a convenience function that returns RunStepDetailsToolCallsCodeObject wrapped in RunStepDetailsToolCallsObjectToolCallsInner
func RunStepDetailsToolCallsCodeObjectAsRunStepDetailsToolCallsObjectToolCallsInner(v *RunStepDetailsToolCallsCodeObject) RunStepDetailsToolCallsObjectToolCallsInner {
	return RunStepDetailsToolCallsObjectToolCallsInner{
		RunStepDetailsToolCallsCodeObject: v,
	}
}

// RunStepDetailsToolCallsFileSearchObjectAsRunStepDetailsToolCallsObjectToolCallsInner is a convenience function that returns RunStepDetailsToolCallsFileSearchObject wrapped in RunStepDetailsToolCallsObjectToolCallsInner
func RunStepDetailsToolCallsFileSearchObjectAsRunStepDetailsToolCallsObjectToolCallsInner(v *RunStepDetailsToolCallsFileSearchObject) RunStepDetailsToolCallsObjectToolCallsInner {
	return RunStepDetailsToolCallsObjectToolCallsInner{
		RunStepDetailsToolCallsFileSearchObject: v,
	}
}

// RunStepDetailsToolCallsFunctionObjectAsRunStepDetailsToolCallsObjectToolCallsInner is a convenience function that returns RunStepDetailsToolCallsFunctionObject wrapped in RunStepDetailsToolCallsObjectToolCallsInner
func RunStepDetailsToolCallsFunctionObjectAsRunStepDetailsToolCallsObjectToolCallsInner(v *RunStepDetailsToolCallsFunctionObject) RunStepDetailsToolCallsObjectToolCallsInner {
	return RunStepDetailsToolCallsObjectToolCallsInner{
		RunStepDetailsToolCallsFunctionObject: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RunStepDetailsToolCallsObjectToolCallsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RunStepDetailsToolCallsCodeObject
	err = newStrictDecoder(data).Decode(&dst.RunStepDetailsToolCallsCodeObject)
	if err == nil {
		jsonRunStepDetailsToolCallsCodeObject, _ := json.Marshal(dst.RunStepDetailsToolCallsCodeObject)
		if string(jsonRunStepDetailsToolCallsCodeObject) == "{}" { // empty struct
			dst.RunStepDetailsToolCallsCodeObject = nil
		} else {
			if err = validator.Validate(dst.RunStepDetailsToolCallsCodeObject); err != nil {
				dst.RunStepDetailsToolCallsCodeObject = nil
			} else {
				match++
			}
		}
	} else {
		dst.RunStepDetailsToolCallsCodeObject = nil
	}

	// try to unmarshal data into RunStepDetailsToolCallsFileSearchObject
	err = newStrictDecoder(data).Decode(&dst.RunStepDetailsToolCallsFileSearchObject)
	if err == nil {
		jsonRunStepDetailsToolCallsFileSearchObject, _ := json.Marshal(dst.RunStepDetailsToolCallsFileSearchObject)
		if string(jsonRunStepDetailsToolCallsFileSearchObject) == "{}" { // empty struct
			dst.RunStepDetailsToolCallsFileSearchObject = nil
		} else {
			if err = validator.Validate(dst.RunStepDetailsToolCallsFileSearchObject); err != nil {
				dst.RunStepDetailsToolCallsFileSearchObject = nil
			} else {
				match++
			}
		}
	} else {
		dst.RunStepDetailsToolCallsFileSearchObject = nil
	}

	// try to unmarshal data into RunStepDetailsToolCallsFunctionObject
	err = newStrictDecoder(data).Decode(&dst.RunStepDetailsToolCallsFunctionObject)
	if err == nil {
		jsonRunStepDetailsToolCallsFunctionObject, _ := json.Marshal(dst.RunStepDetailsToolCallsFunctionObject)
		if string(jsonRunStepDetailsToolCallsFunctionObject) == "{}" { // empty struct
			dst.RunStepDetailsToolCallsFunctionObject = nil
		} else {
			if err = validator.Validate(dst.RunStepDetailsToolCallsFunctionObject); err != nil {
				dst.RunStepDetailsToolCallsFunctionObject = nil
			} else {
				match++
			}
		}
	} else {
		dst.RunStepDetailsToolCallsFunctionObject = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RunStepDetailsToolCallsCodeObject = nil
		dst.RunStepDetailsToolCallsFileSearchObject = nil
		dst.RunStepDetailsToolCallsFunctionObject = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RunStepDetailsToolCallsObjectToolCallsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RunStepDetailsToolCallsObjectToolCallsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RunStepDetailsToolCallsObjectToolCallsInner) MarshalJSON() ([]byte, error) {
	if src.RunStepDetailsToolCallsCodeObject != nil {
		return json.Marshal(&src.RunStepDetailsToolCallsCodeObject)
	}

	if src.RunStepDetailsToolCallsFileSearchObject != nil {
		return json.Marshal(&src.RunStepDetailsToolCallsFileSearchObject)
	}

	if src.RunStepDetailsToolCallsFunctionObject != nil {
		return json.Marshal(&src.RunStepDetailsToolCallsFunctionObject)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RunStepDetailsToolCallsObjectToolCallsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RunStepDetailsToolCallsCodeObject != nil {
		return obj.RunStepDetailsToolCallsCodeObject
	}

	if obj.RunStepDetailsToolCallsFileSearchObject != nil {
		return obj.RunStepDetailsToolCallsFileSearchObject
	}

	if obj.RunStepDetailsToolCallsFunctionObject != nil {
		return obj.RunStepDetailsToolCallsFunctionObject
	}

	// all schemas are nil
	return nil
}

type NullableRunStepDetailsToolCallsObjectToolCallsInner struct {
	value *RunStepDetailsToolCallsObjectToolCallsInner
	isSet bool
}

func (v NullableRunStepDetailsToolCallsObjectToolCallsInner) Get() *RunStepDetailsToolCallsObjectToolCallsInner {
	return v.value
}

func (v *NullableRunStepDetailsToolCallsObjectToolCallsInner) Set(val *RunStepDetailsToolCallsObjectToolCallsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableRunStepDetailsToolCallsObjectToolCallsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableRunStepDetailsToolCallsObjectToolCallsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunStepDetailsToolCallsObjectToolCallsInner(val *RunStepDetailsToolCallsObjectToolCallsInner) *NullableRunStepDetailsToolCallsObjectToolCallsInner {
	return &NullableRunStepDetailsToolCallsObjectToolCallsInner{value: val, isSet: true}
}

func (v NullableRunStepDetailsToolCallsObjectToolCallsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunStepDetailsToolCallsObjectToolCallsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


