/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateVectorStoreFileRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateVectorStoreFileRequest{}

// CreateVectorStoreFileRequest struct for CreateVectorStoreFileRequest
type CreateVectorStoreFileRequest struct {
	// A [File](/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files.
	FileId string `json:"file_id"`
	ChunkingStrategy *ChunkingStrategyRequestParam `json:"chunking_strategy,omitempty"`
}

type _CreateVectorStoreFileRequest CreateVectorStoreFileRequest

// NewCreateVectorStoreFileRequest instantiates a new CreateVectorStoreFileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVectorStoreFileRequest(fileId string) *CreateVectorStoreFileRequest {
	this := CreateVectorStoreFileRequest{}
	this.FileId = fileId
	return &this
}

// NewCreateVectorStoreFileRequestWithDefaults instantiates a new CreateVectorStoreFileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVectorStoreFileRequestWithDefaults() *CreateVectorStoreFileRequest {
	this := CreateVectorStoreFileRequest{}
	return &this
}

// GetFileId returns the FileId field value
func (o *CreateVectorStoreFileRequest) GetFileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value
// and a boolean to check if the value has been set.
func (o *CreateVectorStoreFileRequest) GetFileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileId, true
}

// SetFileId sets field value
func (o *CreateVectorStoreFileRequest) SetFileId(v string) {
	o.FileId = v
}

// GetChunkingStrategy returns the ChunkingStrategy field value if set, zero value otherwise.
func (o *CreateVectorStoreFileRequest) GetChunkingStrategy() ChunkingStrategyRequestParam {
	if o == nil || IsNil(o.ChunkingStrategy) {
		var ret ChunkingStrategyRequestParam
		return ret
	}
	return *o.ChunkingStrategy
}

// GetChunkingStrategyOk returns a tuple with the ChunkingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVectorStoreFileRequest) GetChunkingStrategyOk() (*ChunkingStrategyRequestParam, bool) {
	if o == nil || IsNil(o.ChunkingStrategy) {
		return nil, false
	}
	return o.ChunkingStrategy, true
}

// HasChunkingStrategy returns a boolean if a field has been set.
func (o *CreateVectorStoreFileRequest) HasChunkingStrategy() bool {
	if o != nil && !IsNil(o.ChunkingStrategy) {
		return true
	}

	return false
}

// SetChunkingStrategy gets a reference to the given ChunkingStrategyRequestParam and assigns it to the ChunkingStrategy field.
func (o *CreateVectorStoreFileRequest) SetChunkingStrategy(v ChunkingStrategyRequestParam) {
	o.ChunkingStrategy = &v
}

func (o CreateVectorStoreFileRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateVectorStoreFileRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file_id"] = o.FileId
	if !IsNil(o.ChunkingStrategy) {
		toSerialize["chunking_strategy"] = o.ChunkingStrategy
	}
	return toSerialize, nil
}

func (o *CreateVectorStoreFileRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateVectorStoreFileRequest := _CreateVectorStoreFileRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateVectorStoreFileRequest)

	if err != nil {
		return err
	}

	*o = CreateVectorStoreFileRequest(varCreateVectorStoreFileRequest)

	return err
}

type NullableCreateVectorStoreFileRequest struct {
	value *CreateVectorStoreFileRequest
	isSet bool
}

func (v NullableCreateVectorStoreFileRequest) Get() *CreateVectorStoreFileRequest {
	return v.value
}

func (v *NullableCreateVectorStoreFileRequest) Set(val *CreateVectorStoreFileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVectorStoreFileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVectorStoreFileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVectorStoreFileRequest(val *CreateVectorStoreFileRequest) *NullableCreateVectorStoreFileRequest {
	return &NullableCreateVectorStoreFileRequest{value: val, isSet: true}
}

func (v NullableCreateVectorStoreFileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVectorStoreFileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


