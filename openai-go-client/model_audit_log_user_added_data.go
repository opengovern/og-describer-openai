/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuditLogUserAddedData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogUserAddedData{}

// AuditLogUserAddedData The payload used to add the user to the project.
type AuditLogUserAddedData struct {
	// The role of the user. Is either `owner` or `member`.
	Role *string `json:"role,omitempty"`
}

// NewAuditLogUserAddedData instantiates a new AuditLogUserAddedData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogUserAddedData() *AuditLogUserAddedData {
	this := AuditLogUserAddedData{}
	return &this
}

// NewAuditLogUserAddedDataWithDefaults instantiates a new AuditLogUserAddedData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogUserAddedDataWithDefaults() *AuditLogUserAddedData {
	this := AuditLogUserAddedData{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *AuditLogUserAddedData) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogUserAddedData) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *AuditLogUserAddedData) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *AuditLogUserAddedData) SetRole(v string) {
	o.Role = &v
}

func (o AuditLogUserAddedData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogUserAddedData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	return toSerialize, nil
}

type NullableAuditLogUserAddedData struct {
	value *AuditLogUserAddedData
	isSet bool
}

func (v NullableAuditLogUserAddedData) Get() *AuditLogUserAddedData {
	return v.value
}

func (v *NullableAuditLogUserAddedData) Set(val *AuditLogUserAddedData) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogUserAddedData) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogUserAddedData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogUserAddedData(val *AuditLogUserAddedData) *NullableAuditLogUserAddedData {
	return &NullableAuditLogUserAddedData{value: val, isSet: true}
}

func (v NullableAuditLogUserAddedData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogUserAddedData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


