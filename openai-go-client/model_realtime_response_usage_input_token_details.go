/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RealtimeResponseUsageInputTokenDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeResponseUsageInputTokenDetails{}

// RealtimeResponseUsageInputTokenDetails Details about the input tokens used in the Response.
type RealtimeResponseUsageInputTokenDetails struct {
	// The number of cached tokens used in the Response.
	CachedTokens *int32 `json:"cached_tokens,omitempty"`
	// The number of text tokens used in the Response.
	TextTokens *int32 `json:"text_tokens,omitempty"`
	// The number of audio tokens used in the Response.
	AudioTokens *int32 `json:"audio_tokens,omitempty"`
}

// NewRealtimeResponseUsageInputTokenDetails instantiates a new RealtimeResponseUsageInputTokenDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeResponseUsageInputTokenDetails() *RealtimeResponseUsageInputTokenDetails {
	this := RealtimeResponseUsageInputTokenDetails{}
	return &this
}

// NewRealtimeResponseUsageInputTokenDetailsWithDefaults instantiates a new RealtimeResponseUsageInputTokenDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeResponseUsageInputTokenDetailsWithDefaults() *RealtimeResponseUsageInputTokenDetails {
	this := RealtimeResponseUsageInputTokenDetails{}
	return &this
}

// GetCachedTokens returns the CachedTokens field value if set, zero value otherwise.
func (o *RealtimeResponseUsageInputTokenDetails) GetCachedTokens() int32 {
	if o == nil || IsNil(o.CachedTokens) {
		var ret int32
		return ret
	}
	return *o.CachedTokens
}

// GetCachedTokensOk returns a tuple with the CachedTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponseUsageInputTokenDetails) GetCachedTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.CachedTokens) {
		return nil, false
	}
	return o.CachedTokens, true
}

// HasCachedTokens returns a boolean if a field has been set.
func (o *RealtimeResponseUsageInputTokenDetails) HasCachedTokens() bool {
	if o != nil && !IsNil(o.CachedTokens) {
		return true
	}

	return false
}

// SetCachedTokens gets a reference to the given int32 and assigns it to the CachedTokens field.
func (o *RealtimeResponseUsageInputTokenDetails) SetCachedTokens(v int32) {
	o.CachedTokens = &v
}

// GetTextTokens returns the TextTokens field value if set, zero value otherwise.
func (o *RealtimeResponseUsageInputTokenDetails) GetTextTokens() int32 {
	if o == nil || IsNil(o.TextTokens) {
		var ret int32
		return ret
	}
	return *o.TextTokens
}

// GetTextTokensOk returns a tuple with the TextTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponseUsageInputTokenDetails) GetTextTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.TextTokens) {
		return nil, false
	}
	return o.TextTokens, true
}

// HasTextTokens returns a boolean if a field has been set.
func (o *RealtimeResponseUsageInputTokenDetails) HasTextTokens() bool {
	if o != nil && !IsNil(o.TextTokens) {
		return true
	}

	return false
}

// SetTextTokens gets a reference to the given int32 and assigns it to the TextTokens field.
func (o *RealtimeResponseUsageInputTokenDetails) SetTextTokens(v int32) {
	o.TextTokens = &v
}

// GetAudioTokens returns the AudioTokens field value if set, zero value otherwise.
func (o *RealtimeResponseUsageInputTokenDetails) GetAudioTokens() int32 {
	if o == nil || IsNil(o.AudioTokens) {
		var ret int32
		return ret
	}
	return *o.AudioTokens
}

// GetAudioTokensOk returns a tuple with the AudioTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponseUsageInputTokenDetails) GetAudioTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.AudioTokens) {
		return nil, false
	}
	return o.AudioTokens, true
}

// HasAudioTokens returns a boolean if a field has been set.
func (o *RealtimeResponseUsageInputTokenDetails) HasAudioTokens() bool {
	if o != nil && !IsNil(o.AudioTokens) {
		return true
	}

	return false
}

// SetAudioTokens gets a reference to the given int32 and assigns it to the AudioTokens field.
func (o *RealtimeResponseUsageInputTokenDetails) SetAudioTokens(v int32) {
	o.AudioTokens = &v
}

func (o RealtimeResponseUsageInputTokenDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeResponseUsageInputTokenDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CachedTokens) {
		toSerialize["cached_tokens"] = o.CachedTokens
	}
	if !IsNil(o.TextTokens) {
		toSerialize["text_tokens"] = o.TextTokens
	}
	if !IsNil(o.AudioTokens) {
		toSerialize["audio_tokens"] = o.AudioTokens
	}
	return toSerialize, nil
}

type NullableRealtimeResponseUsageInputTokenDetails struct {
	value *RealtimeResponseUsageInputTokenDetails
	isSet bool
}

func (v NullableRealtimeResponseUsageInputTokenDetails) Get() *RealtimeResponseUsageInputTokenDetails {
	return v.value
}

func (v *NullableRealtimeResponseUsageInputTokenDetails) Set(val *RealtimeResponseUsageInputTokenDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeResponseUsageInputTokenDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeResponseUsageInputTokenDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeResponseUsageInputTokenDetails(val *RealtimeResponseUsageInputTokenDetails) *NullableRealtimeResponseUsageInputTokenDetails {
	return &NullableRealtimeResponseUsageInputTokenDetails{value: val, isSet: true}
}

func (v NullableRealtimeResponseUsageInputTokenDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeResponseUsageInputTokenDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


