/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RealtimeResponseUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeResponseUsage{}

// RealtimeResponseUsage Usage statistics for the Response, this will correspond to billing. A Realtime API session will maintain a conversation context and append new Items to the Conversation, thus output from previous turns (text and audio tokens) will become the input for later turns.
type RealtimeResponseUsage struct {
	// The total number of tokens in the Response including input and output text and audio tokens.
	TotalTokens *int32 `json:"total_tokens,omitempty"`
	// The number of input tokens used in the Response, including text and audio tokens.
	InputTokens *int32 `json:"input_tokens,omitempty"`
	// The number of output tokens sent in the Response, including text and audio tokens.
	OutputTokens *int32 `json:"output_tokens,omitempty"`
	InputTokenDetails *RealtimeResponseUsageInputTokenDetails `json:"input_token_details,omitempty"`
	OutputTokenDetails *RealtimeResponseUsageOutputTokenDetails `json:"output_token_details,omitempty"`
}

// NewRealtimeResponseUsage instantiates a new RealtimeResponseUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeResponseUsage() *RealtimeResponseUsage {
	this := RealtimeResponseUsage{}
	return &this
}

// NewRealtimeResponseUsageWithDefaults instantiates a new RealtimeResponseUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeResponseUsageWithDefaults() *RealtimeResponseUsage {
	this := RealtimeResponseUsage{}
	return &this
}

// GetTotalTokens returns the TotalTokens field value if set, zero value otherwise.
func (o *RealtimeResponseUsage) GetTotalTokens() int32 {
	if o == nil || IsNil(o.TotalTokens) {
		var ret int32
		return ret
	}
	return *o.TotalTokens
}

// GetTotalTokensOk returns a tuple with the TotalTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponseUsage) GetTotalTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalTokens) {
		return nil, false
	}
	return o.TotalTokens, true
}

// HasTotalTokens returns a boolean if a field has been set.
func (o *RealtimeResponseUsage) HasTotalTokens() bool {
	if o != nil && !IsNil(o.TotalTokens) {
		return true
	}

	return false
}

// SetTotalTokens gets a reference to the given int32 and assigns it to the TotalTokens field.
func (o *RealtimeResponseUsage) SetTotalTokens(v int32) {
	o.TotalTokens = &v
}

// GetInputTokens returns the InputTokens field value if set, zero value otherwise.
func (o *RealtimeResponseUsage) GetInputTokens() int32 {
	if o == nil || IsNil(o.InputTokens) {
		var ret int32
		return ret
	}
	return *o.InputTokens
}

// GetInputTokensOk returns a tuple with the InputTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponseUsage) GetInputTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.InputTokens) {
		return nil, false
	}
	return o.InputTokens, true
}

// HasInputTokens returns a boolean if a field has been set.
func (o *RealtimeResponseUsage) HasInputTokens() bool {
	if o != nil && !IsNil(o.InputTokens) {
		return true
	}

	return false
}

// SetInputTokens gets a reference to the given int32 and assigns it to the InputTokens field.
func (o *RealtimeResponseUsage) SetInputTokens(v int32) {
	o.InputTokens = &v
}

// GetOutputTokens returns the OutputTokens field value if set, zero value otherwise.
func (o *RealtimeResponseUsage) GetOutputTokens() int32 {
	if o == nil || IsNil(o.OutputTokens) {
		var ret int32
		return ret
	}
	return *o.OutputTokens
}

// GetOutputTokensOk returns a tuple with the OutputTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponseUsage) GetOutputTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.OutputTokens) {
		return nil, false
	}
	return o.OutputTokens, true
}

// HasOutputTokens returns a boolean if a field has been set.
func (o *RealtimeResponseUsage) HasOutputTokens() bool {
	if o != nil && !IsNil(o.OutputTokens) {
		return true
	}

	return false
}

// SetOutputTokens gets a reference to the given int32 and assigns it to the OutputTokens field.
func (o *RealtimeResponseUsage) SetOutputTokens(v int32) {
	o.OutputTokens = &v
}

// GetInputTokenDetails returns the InputTokenDetails field value if set, zero value otherwise.
func (o *RealtimeResponseUsage) GetInputTokenDetails() RealtimeResponseUsageInputTokenDetails {
	if o == nil || IsNil(o.InputTokenDetails) {
		var ret RealtimeResponseUsageInputTokenDetails
		return ret
	}
	return *o.InputTokenDetails
}

// GetInputTokenDetailsOk returns a tuple with the InputTokenDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponseUsage) GetInputTokenDetailsOk() (*RealtimeResponseUsageInputTokenDetails, bool) {
	if o == nil || IsNil(o.InputTokenDetails) {
		return nil, false
	}
	return o.InputTokenDetails, true
}

// HasInputTokenDetails returns a boolean if a field has been set.
func (o *RealtimeResponseUsage) HasInputTokenDetails() bool {
	if o != nil && !IsNil(o.InputTokenDetails) {
		return true
	}

	return false
}

// SetInputTokenDetails gets a reference to the given RealtimeResponseUsageInputTokenDetails and assigns it to the InputTokenDetails field.
func (o *RealtimeResponseUsage) SetInputTokenDetails(v RealtimeResponseUsageInputTokenDetails) {
	o.InputTokenDetails = &v
}

// GetOutputTokenDetails returns the OutputTokenDetails field value if set, zero value otherwise.
func (o *RealtimeResponseUsage) GetOutputTokenDetails() RealtimeResponseUsageOutputTokenDetails {
	if o == nil || IsNil(o.OutputTokenDetails) {
		var ret RealtimeResponseUsageOutputTokenDetails
		return ret
	}
	return *o.OutputTokenDetails
}

// GetOutputTokenDetailsOk returns a tuple with the OutputTokenDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponseUsage) GetOutputTokenDetailsOk() (*RealtimeResponseUsageOutputTokenDetails, bool) {
	if o == nil || IsNil(o.OutputTokenDetails) {
		return nil, false
	}
	return o.OutputTokenDetails, true
}

// HasOutputTokenDetails returns a boolean if a field has been set.
func (o *RealtimeResponseUsage) HasOutputTokenDetails() bool {
	if o != nil && !IsNil(o.OutputTokenDetails) {
		return true
	}

	return false
}

// SetOutputTokenDetails gets a reference to the given RealtimeResponseUsageOutputTokenDetails and assigns it to the OutputTokenDetails field.
func (o *RealtimeResponseUsage) SetOutputTokenDetails(v RealtimeResponseUsageOutputTokenDetails) {
	o.OutputTokenDetails = &v
}

func (o RealtimeResponseUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeResponseUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalTokens) {
		toSerialize["total_tokens"] = o.TotalTokens
	}
	if !IsNil(o.InputTokens) {
		toSerialize["input_tokens"] = o.InputTokens
	}
	if !IsNil(o.OutputTokens) {
		toSerialize["output_tokens"] = o.OutputTokens
	}
	if !IsNil(o.InputTokenDetails) {
		toSerialize["input_token_details"] = o.InputTokenDetails
	}
	if !IsNil(o.OutputTokenDetails) {
		toSerialize["output_token_details"] = o.OutputTokenDetails
	}
	return toSerialize, nil
}

type NullableRealtimeResponseUsage struct {
	value *RealtimeResponseUsage
	isSet bool
}

func (v NullableRealtimeResponseUsage) Get() *RealtimeResponseUsage {
	return v.value
}

func (v *NullableRealtimeResponseUsage) Set(val *RealtimeResponseUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeResponseUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeResponseUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeResponseUsage(val *RealtimeResponseUsage) *NullableRealtimeResponseUsage {
	return &NullableRealtimeResponseUsage{value: val, isSet: true}
}

func (v NullableRealtimeResponseUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeResponseUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


