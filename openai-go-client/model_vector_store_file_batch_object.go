/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VectorStoreFileBatchObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VectorStoreFileBatchObject{}

// VectorStoreFileBatchObject A batch of files attached to a vector store.
type VectorStoreFileBatchObject struct {
	// The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`
	// The object type, which is always `vector_store.file_batch`.
	Object string `json:"object"`
	// The Unix timestamp (in seconds) for when the vector store files batch was created.
	CreatedAt int32 `json:"created_at"`
	// The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.
	VectorStoreId string `json:"vector_store_id"`
	// The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
	Status string `json:"status"`
	FileCounts VectorStoreFileBatchObjectFileCounts `json:"file_counts"`
}

type _VectorStoreFileBatchObject VectorStoreFileBatchObject

// NewVectorStoreFileBatchObject instantiates a new VectorStoreFileBatchObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVectorStoreFileBatchObject(id string, object string, createdAt int32, vectorStoreId string, status string, fileCounts VectorStoreFileBatchObjectFileCounts) *VectorStoreFileBatchObject {
	this := VectorStoreFileBatchObject{}
	this.Id = id
	this.Object = object
	this.CreatedAt = createdAt
	this.VectorStoreId = vectorStoreId
	this.Status = status
	this.FileCounts = fileCounts
	return &this
}

// NewVectorStoreFileBatchObjectWithDefaults instantiates a new VectorStoreFileBatchObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVectorStoreFileBatchObjectWithDefaults() *VectorStoreFileBatchObject {
	this := VectorStoreFileBatchObject{}
	return &this
}

// GetId returns the Id field value
func (o *VectorStoreFileBatchObject) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VectorStoreFileBatchObject) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VectorStoreFileBatchObject) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value
func (o *VectorStoreFileBatchObject) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *VectorStoreFileBatchObject) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *VectorStoreFileBatchObject) SetObject(v string) {
	o.Object = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *VectorStoreFileBatchObject) GetCreatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *VectorStoreFileBatchObject) GetCreatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *VectorStoreFileBatchObject) SetCreatedAt(v int32) {
	o.CreatedAt = v
}

// GetVectorStoreId returns the VectorStoreId field value
func (o *VectorStoreFileBatchObject) GetVectorStoreId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VectorStoreId
}

// GetVectorStoreIdOk returns a tuple with the VectorStoreId field value
// and a boolean to check if the value has been set.
func (o *VectorStoreFileBatchObject) GetVectorStoreIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VectorStoreId, true
}

// SetVectorStoreId sets field value
func (o *VectorStoreFileBatchObject) SetVectorStoreId(v string) {
	o.VectorStoreId = v
}

// GetStatus returns the Status field value
func (o *VectorStoreFileBatchObject) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *VectorStoreFileBatchObject) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *VectorStoreFileBatchObject) SetStatus(v string) {
	o.Status = v
}

// GetFileCounts returns the FileCounts field value
func (o *VectorStoreFileBatchObject) GetFileCounts() VectorStoreFileBatchObjectFileCounts {
	if o == nil {
		var ret VectorStoreFileBatchObjectFileCounts
		return ret
	}

	return o.FileCounts
}

// GetFileCountsOk returns a tuple with the FileCounts field value
// and a boolean to check if the value has been set.
func (o *VectorStoreFileBatchObject) GetFileCountsOk() (*VectorStoreFileBatchObjectFileCounts, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileCounts, true
}

// SetFileCounts sets field value
func (o *VectorStoreFileBatchObject) SetFileCounts(v VectorStoreFileBatchObjectFileCounts) {
	o.FileCounts = v
}

func (o VectorStoreFileBatchObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VectorStoreFileBatchObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["object"] = o.Object
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["vector_store_id"] = o.VectorStoreId
	toSerialize["status"] = o.Status
	toSerialize["file_counts"] = o.FileCounts
	return toSerialize, nil
}

func (o *VectorStoreFileBatchObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"object",
		"created_at",
		"vector_store_id",
		"status",
		"file_counts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVectorStoreFileBatchObject := _VectorStoreFileBatchObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVectorStoreFileBatchObject)

	if err != nil {
		return err
	}

	*o = VectorStoreFileBatchObject(varVectorStoreFileBatchObject)

	return err
}

type NullableVectorStoreFileBatchObject struct {
	value *VectorStoreFileBatchObject
	isSet bool
}

func (v NullableVectorStoreFileBatchObject) Get() *VectorStoreFileBatchObject {
	return v.value
}

func (v *NullableVectorStoreFileBatchObject) Set(val *VectorStoreFileBatchObject) {
	v.value = val
	v.isSet = true
}

func (v NullableVectorStoreFileBatchObject) IsSet() bool {
	return v.isSet
}

func (v *NullableVectorStoreFileBatchObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVectorStoreFileBatchObject(val *VectorStoreFileBatchObject) *NullableVectorStoreFileBatchObject {
	return &NullableVectorStoreFileBatchObject{value: val, isSet: true}
}

func (v NullableVectorStoreFileBatchObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVectorStoreFileBatchObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


