/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RealtimeSessionInputAudioTranscription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeSessionInputAudioTranscription{}

// RealtimeSessionInputAudioTranscription Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native  to the model, since the model consumes audio directly. Transcription runs  asynchronously through Whisper and should be treated as rough guidance  rather than the representation understood by the model. 
type RealtimeSessionInputAudioTranscription struct {
	// The model to use for transcription, `whisper-1` is the only currently  supported model. 
	Model *string `json:"model,omitempty"`
}

// NewRealtimeSessionInputAudioTranscription instantiates a new RealtimeSessionInputAudioTranscription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeSessionInputAudioTranscription() *RealtimeSessionInputAudioTranscription {
	this := RealtimeSessionInputAudioTranscription{}
	return &this
}

// NewRealtimeSessionInputAudioTranscriptionWithDefaults instantiates a new RealtimeSessionInputAudioTranscription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeSessionInputAudioTranscriptionWithDefaults() *RealtimeSessionInputAudioTranscription {
	this := RealtimeSessionInputAudioTranscription{}
	return &this
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *RealtimeSessionInputAudioTranscription) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeSessionInputAudioTranscription) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *RealtimeSessionInputAudioTranscription) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *RealtimeSessionInputAudioTranscription) SetModel(v string) {
	o.Model = &v
}

func (o RealtimeSessionInputAudioTranscription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeSessionInputAudioTranscription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	return toSerialize, nil
}

type NullableRealtimeSessionInputAudioTranscription struct {
	value *RealtimeSessionInputAudioTranscription
	isSet bool
}

func (v NullableRealtimeSessionInputAudioTranscription) Get() *RealtimeSessionInputAudioTranscription {
	return v.value
}

func (v *NullableRealtimeSessionInputAudioTranscription) Set(val *RealtimeSessionInputAudioTranscription) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeSessionInputAudioTranscription) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeSessionInputAudioTranscription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeSessionInputAudioTranscription(val *RealtimeSessionInputAudioTranscription) *NullableRealtimeSessionInputAudioTranscription {
	return &NullableRealtimeSessionInputAudioTranscription{value: val, isSet: true}
}

func (v NullableRealtimeSessionInputAudioTranscription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeSessionInputAudioTranscription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


