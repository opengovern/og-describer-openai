/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RealtimeConversationItemContentInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeConversationItemContentInner{}

// RealtimeConversationItemContentInner struct for RealtimeConversationItemContentInner
type RealtimeConversationItemContentInner struct {
	// The content type (`input_text`, `input_audio`, `text`).
	Type *string `json:"type,omitempty"`
	// The text content, used for `input_text` and `text` content types.
	Text *string `json:"text,omitempty"`
	// Base64-encoded audio bytes, used for `input_audio` content type.
	Audio *string `json:"audio,omitempty"`
	// The transcript of the audio, used for `input_audio` content type.
	Transcript *string `json:"transcript,omitempty"`
}

// NewRealtimeConversationItemContentInner instantiates a new RealtimeConversationItemContentInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeConversationItemContentInner() *RealtimeConversationItemContentInner {
	this := RealtimeConversationItemContentInner{}
	return &this
}

// NewRealtimeConversationItemContentInnerWithDefaults instantiates a new RealtimeConversationItemContentInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeConversationItemContentInnerWithDefaults() *RealtimeConversationItemContentInner {
	this := RealtimeConversationItemContentInner{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RealtimeConversationItemContentInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeConversationItemContentInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RealtimeConversationItemContentInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RealtimeConversationItemContentInner) SetType(v string) {
	o.Type = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *RealtimeConversationItemContentInner) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeConversationItemContentInner) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *RealtimeConversationItemContentInner) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *RealtimeConversationItemContentInner) SetText(v string) {
	o.Text = &v
}

// GetAudio returns the Audio field value if set, zero value otherwise.
func (o *RealtimeConversationItemContentInner) GetAudio() string {
	if o == nil || IsNil(o.Audio) {
		var ret string
		return ret
	}
	return *o.Audio
}

// GetAudioOk returns a tuple with the Audio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeConversationItemContentInner) GetAudioOk() (*string, bool) {
	if o == nil || IsNil(o.Audio) {
		return nil, false
	}
	return o.Audio, true
}

// HasAudio returns a boolean if a field has been set.
func (o *RealtimeConversationItemContentInner) HasAudio() bool {
	if o != nil && !IsNil(o.Audio) {
		return true
	}

	return false
}

// SetAudio gets a reference to the given string and assigns it to the Audio field.
func (o *RealtimeConversationItemContentInner) SetAudio(v string) {
	o.Audio = &v
}

// GetTranscript returns the Transcript field value if set, zero value otherwise.
func (o *RealtimeConversationItemContentInner) GetTranscript() string {
	if o == nil || IsNil(o.Transcript) {
		var ret string
		return ret
	}
	return *o.Transcript
}

// GetTranscriptOk returns a tuple with the Transcript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeConversationItemContentInner) GetTranscriptOk() (*string, bool) {
	if o == nil || IsNil(o.Transcript) {
		return nil, false
	}
	return o.Transcript, true
}

// HasTranscript returns a boolean if a field has been set.
func (o *RealtimeConversationItemContentInner) HasTranscript() bool {
	if o != nil && !IsNil(o.Transcript) {
		return true
	}

	return false
}

// SetTranscript gets a reference to the given string and assigns it to the Transcript field.
func (o *RealtimeConversationItemContentInner) SetTranscript(v string) {
	o.Transcript = &v
}

func (o RealtimeConversationItemContentInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeConversationItemContentInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Audio) {
		toSerialize["audio"] = o.Audio
	}
	if !IsNil(o.Transcript) {
		toSerialize["transcript"] = o.Transcript
	}
	return toSerialize, nil
}

type NullableRealtimeConversationItemContentInner struct {
	value *RealtimeConversationItemContentInner
	isSet bool
}

func (v NullableRealtimeConversationItemContentInner) Get() *RealtimeConversationItemContentInner {
	return v.value
}

func (v *NullableRealtimeConversationItemContentInner) Set(val *RealtimeConversationItemContentInner) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeConversationItemContentInner) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeConversationItemContentInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeConversationItemContentInner(val *RealtimeConversationItemContentInner) *NullableRealtimeConversationItemContentInner {
	return &NullableRealtimeConversationItemContentInner{value: val, isSet: true}
}

func (v NullableRealtimeConversationItemContentInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeConversationItemContentInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


