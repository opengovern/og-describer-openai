/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InviteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InviteRequest{}

// InviteRequest struct for InviteRequest
type InviteRequest struct {
	// Send an email to this address
	Email string `json:"email"`
	// `owner` or `reader`
	Role string `json:"role"`
}

type _InviteRequest InviteRequest

// NewInviteRequest instantiates a new InviteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInviteRequest(email string, role string) *InviteRequest {
	this := InviteRequest{}
	this.Email = email
	this.Role = role
	return &this
}

// NewInviteRequestWithDefaults instantiates a new InviteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteRequestWithDefaults() *InviteRequest {
	this := InviteRequest{}
	return &this
}

// GetEmail returns the Email field value
func (o *InviteRequest) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *InviteRequest) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *InviteRequest) SetEmail(v string) {
	o.Email = v
}

// GetRole returns the Role field value
func (o *InviteRequest) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *InviteRequest) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *InviteRequest) SetRole(v string) {
	o.Role = v
}

func (o InviteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InviteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	toSerialize["role"] = o.Role
	return toSerialize, nil
}

func (o *InviteRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInviteRequest := _InviteRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInviteRequest)

	if err != nil {
		return err
	}

	*o = InviteRequest(varInviteRequest)

	return err
}

type NullableInviteRequest struct {
	value *InviteRequest
	isSet bool
}

func (v NullableInviteRequest) Get() *InviteRequest {
	return v.value
}

func (v *NullableInviteRequest) Set(val *InviteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteRequest(val *InviteRequest) *NullableInviteRequest {
	return &NullableInviteRequest{value: val, isSet: true}
}

func (v NullableInviteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


