/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RealtimeServerEventRateLimitsUpdated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeServerEventRateLimitsUpdated{}

// RealtimeServerEventRateLimitsUpdated Emitted at the beginning of a Response to indicate the updated rate limits. When a Response is created some tokens will be \"reserved\" for the output tokens, the rate limits shown here reflect that reservation, which is then adjusted accordingly once the Response is completed.
type RealtimeServerEventRateLimitsUpdated struct {
	// The unique ID of the server event.
	EventId string `json:"event_id"`
	// The event type, must be `rate_limits.updated`.
	Type string `json:"type"`
	// List of rate limit information.
	RateLimits []RealtimeServerEventRateLimitsUpdatedRateLimitsInner `json:"rate_limits"`
}

type _RealtimeServerEventRateLimitsUpdated RealtimeServerEventRateLimitsUpdated

// NewRealtimeServerEventRateLimitsUpdated instantiates a new RealtimeServerEventRateLimitsUpdated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeServerEventRateLimitsUpdated(eventId string, type_ string, rateLimits []RealtimeServerEventRateLimitsUpdatedRateLimitsInner) *RealtimeServerEventRateLimitsUpdated {
	this := RealtimeServerEventRateLimitsUpdated{}
	this.EventId = eventId
	this.Type = type_
	this.RateLimits = rateLimits
	return &this
}

// NewRealtimeServerEventRateLimitsUpdatedWithDefaults instantiates a new RealtimeServerEventRateLimitsUpdated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeServerEventRateLimitsUpdatedWithDefaults() *RealtimeServerEventRateLimitsUpdated {
	this := RealtimeServerEventRateLimitsUpdated{}
	return &this
}

// GetEventId returns the EventId field value
func (o *RealtimeServerEventRateLimitsUpdated) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventRateLimitsUpdated) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *RealtimeServerEventRateLimitsUpdated) SetEventId(v string) {
	o.EventId = v
}

// GetType returns the Type field value
func (o *RealtimeServerEventRateLimitsUpdated) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventRateLimitsUpdated) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RealtimeServerEventRateLimitsUpdated) SetType(v string) {
	o.Type = v
}

// GetRateLimits returns the RateLimits field value
func (o *RealtimeServerEventRateLimitsUpdated) GetRateLimits() []RealtimeServerEventRateLimitsUpdatedRateLimitsInner {
	if o == nil {
		var ret []RealtimeServerEventRateLimitsUpdatedRateLimitsInner
		return ret
	}

	return o.RateLimits
}

// GetRateLimitsOk returns a tuple with the RateLimits field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventRateLimitsUpdated) GetRateLimitsOk() ([]RealtimeServerEventRateLimitsUpdatedRateLimitsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.RateLimits, true
}

// SetRateLimits sets field value
func (o *RealtimeServerEventRateLimitsUpdated) SetRateLimits(v []RealtimeServerEventRateLimitsUpdatedRateLimitsInner) {
	o.RateLimits = v
}

func (o RealtimeServerEventRateLimitsUpdated) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeServerEventRateLimitsUpdated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_id"] = o.EventId
	toSerialize["type"] = o.Type
	toSerialize["rate_limits"] = o.RateLimits
	return toSerialize, nil
}

func (o *RealtimeServerEventRateLimitsUpdated) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_id",
		"type",
		"rate_limits",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRealtimeServerEventRateLimitsUpdated := _RealtimeServerEventRateLimitsUpdated{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRealtimeServerEventRateLimitsUpdated)

	if err != nil {
		return err
	}

	*o = RealtimeServerEventRateLimitsUpdated(varRealtimeServerEventRateLimitsUpdated)

	return err
}

type NullableRealtimeServerEventRateLimitsUpdated struct {
	value *RealtimeServerEventRateLimitsUpdated
	isSet bool
}

func (v NullableRealtimeServerEventRateLimitsUpdated) Get() *RealtimeServerEventRateLimitsUpdated {
	return v.value
}

func (v *NullableRealtimeServerEventRateLimitsUpdated) Set(val *RealtimeServerEventRateLimitsUpdated) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeServerEventRateLimitsUpdated) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeServerEventRateLimitsUpdated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeServerEventRateLimitsUpdated(val *RealtimeServerEventRateLimitsUpdated) *NullableRealtimeServerEventRateLimitsUpdated {
	return &NullableRealtimeServerEventRateLimitsUpdated{value: val, isSet: true}
}

func (v NullableRealtimeServerEventRateLimitsUpdated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeServerEventRateLimitsUpdated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


