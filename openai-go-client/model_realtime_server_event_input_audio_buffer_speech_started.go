/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RealtimeServerEventInputAudioBufferSpeechStarted type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeServerEventInputAudioBufferSpeechStarted{}

// RealtimeServerEventInputAudioBufferSpeechStarted Sent by the server when in `server_vad` mode to indicate that speech has been detected in the audio buffer. This can happen any time audio is added to the buffer (unless speech is already detected). The client may want to use this event to interrupt audio playback or provide visual feedback to the user. The client should expect to receive a `input_audio_buffer.speech_stopped` event when speech stops. The `item_id` property is the ID of the user message item that will be created when speech stops and will also be included in the `input_audio_buffer.speech_stopped` event (unless the client manually commits the audio buffer during VAD activation).
type RealtimeServerEventInputAudioBufferSpeechStarted struct {
	// The unique ID of the server event.
	EventId string `json:"event_id"`
	// The event type, must be `input_audio_buffer.speech_started`.
	Type string `json:"type"`
	// Milliseconds from the start of all audio written to the buffer during the session when speech was first detected. This will correspond to the beginning of audio sent to the model, and thus includes the `prefix_padding_ms` configured in the Session.
	AudioStartMs int32 `json:"audio_start_ms"`
	// The ID of the user message item that will be created when speech stops.
	ItemId string `json:"item_id"`
}

type _RealtimeServerEventInputAudioBufferSpeechStarted RealtimeServerEventInputAudioBufferSpeechStarted

// NewRealtimeServerEventInputAudioBufferSpeechStarted instantiates a new RealtimeServerEventInputAudioBufferSpeechStarted object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeServerEventInputAudioBufferSpeechStarted(eventId string, type_ string, audioStartMs int32, itemId string) *RealtimeServerEventInputAudioBufferSpeechStarted {
	this := RealtimeServerEventInputAudioBufferSpeechStarted{}
	this.EventId = eventId
	this.Type = type_
	this.AudioStartMs = audioStartMs
	this.ItemId = itemId
	return &this
}

// NewRealtimeServerEventInputAudioBufferSpeechStartedWithDefaults instantiates a new RealtimeServerEventInputAudioBufferSpeechStarted object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeServerEventInputAudioBufferSpeechStartedWithDefaults() *RealtimeServerEventInputAudioBufferSpeechStarted {
	this := RealtimeServerEventInputAudioBufferSpeechStarted{}
	return &this
}

// GetEventId returns the EventId field value
func (o *RealtimeServerEventInputAudioBufferSpeechStarted) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventInputAudioBufferSpeechStarted) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *RealtimeServerEventInputAudioBufferSpeechStarted) SetEventId(v string) {
	o.EventId = v
}

// GetType returns the Type field value
func (o *RealtimeServerEventInputAudioBufferSpeechStarted) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventInputAudioBufferSpeechStarted) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RealtimeServerEventInputAudioBufferSpeechStarted) SetType(v string) {
	o.Type = v
}

// GetAudioStartMs returns the AudioStartMs field value
func (o *RealtimeServerEventInputAudioBufferSpeechStarted) GetAudioStartMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AudioStartMs
}

// GetAudioStartMsOk returns a tuple with the AudioStartMs field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventInputAudioBufferSpeechStarted) GetAudioStartMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AudioStartMs, true
}

// SetAudioStartMs sets field value
func (o *RealtimeServerEventInputAudioBufferSpeechStarted) SetAudioStartMs(v int32) {
	o.AudioStartMs = v
}

// GetItemId returns the ItemId field value
func (o *RealtimeServerEventInputAudioBufferSpeechStarted) GetItemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventInputAudioBufferSpeechStarted) GetItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemId, true
}

// SetItemId sets field value
func (o *RealtimeServerEventInputAudioBufferSpeechStarted) SetItemId(v string) {
	o.ItemId = v
}

func (o RealtimeServerEventInputAudioBufferSpeechStarted) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeServerEventInputAudioBufferSpeechStarted) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_id"] = o.EventId
	toSerialize["type"] = o.Type
	toSerialize["audio_start_ms"] = o.AudioStartMs
	toSerialize["item_id"] = o.ItemId
	return toSerialize, nil
}

func (o *RealtimeServerEventInputAudioBufferSpeechStarted) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_id",
		"type",
		"audio_start_ms",
		"item_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRealtimeServerEventInputAudioBufferSpeechStarted := _RealtimeServerEventInputAudioBufferSpeechStarted{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRealtimeServerEventInputAudioBufferSpeechStarted)

	if err != nil {
		return err
	}

	*o = RealtimeServerEventInputAudioBufferSpeechStarted(varRealtimeServerEventInputAudioBufferSpeechStarted)

	return err
}

type NullableRealtimeServerEventInputAudioBufferSpeechStarted struct {
	value *RealtimeServerEventInputAudioBufferSpeechStarted
	isSet bool
}

func (v NullableRealtimeServerEventInputAudioBufferSpeechStarted) Get() *RealtimeServerEventInputAudioBufferSpeechStarted {
	return v.value
}

func (v *NullableRealtimeServerEventInputAudioBufferSpeechStarted) Set(val *RealtimeServerEventInputAudioBufferSpeechStarted) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeServerEventInputAudioBufferSpeechStarted) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeServerEventInputAudioBufferSpeechStarted) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeServerEventInputAudioBufferSpeechStarted(val *RealtimeServerEventInputAudioBufferSpeechStarted) *NullableRealtimeServerEventInputAudioBufferSpeechStarted {
	return &NullableRealtimeServerEventInputAudioBufferSpeechStarted{value: val, isSet: true}
}

func (v NullableRealtimeServerEventInputAudioBufferSpeechStarted) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeServerEventInputAudioBufferSpeechStarted) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


