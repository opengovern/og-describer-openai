/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RealtimeClientEventInputAudioBufferCommit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeClientEventInputAudioBufferCommit{}

// RealtimeClientEventInputAudioBufferCommit Send this event to commit the user input audio buffer, which will create a new user message item in the conversation. This event will produce an error if the input audio buffer is empty. When in Server VAD mode, the client does not need to send this event, the server will commit the audio buffer automatically. Committing the input audio buffer will trigger input audio transcription (if enabled in session configuration), but it will not create a response from the model. The server will respond with an `input_audio_buffer.committed` event.
type RealtimeClientEventInputAudioBufferCommit struct {
	// Optional client-generated ID used to identify this event.
	EventId *string `json:"event_id,omitempty"`
	// The event type, must be \"input_audio_buffer.commit\".
	Type string `json:"type"`
}

type _RealtimeClientEventInputAudioBufferCommit RealtimeClientEventInputAudioBufferCommit

// NewRealtimeClientEventInputAudioBufferCommit instantiates a new RealtimeClientEventInputAudioBufferCommit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeClientEventInputAudioBufferCommit(type_ string) *RealtimeClientEventInputAudioBufferCommit {
	this := RealtimeClientEventInputAudioBufferCommit{}
	this.Type = type_
	return &this
}

// NewRealtimeClientEventInputAudioBufferCommitWithDefaults instantiates a new RealtimeClientEventInputAudioBufferCommit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeClientEventInputAudioBufferCommitWithDefaults() *RealtimeClientEventInputAudioBufferCommit {
	this := RealtimeClientEventInputAudioBufferCommit{}
	return &this
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *RealtimeClientEventInputAudioBufferCommit) GetEventId() string {
	if o == nil || IsNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeClientEventInputAudioBufferCommit) GetEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *RealtimeClientEventInputAudioBufferCommit) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *RealtimeClientEventInputAudioBufferCommit) SetEventId(v string) {
	o.EventId = &v
}

// GetType returns the Type field value
func (o *RealtimeClientEventInputAudioBufferCommit) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RealtimeClientEventInputAudioBufferCommit) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RealtimeClientEventInputAudioBufferCommit) SetType(v string) {
	o.Type = v
}

func (o RealtimeClientEventInputAudioBufferCommit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeClientEventInputAudioBufferCommit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventId) {
		toSerialize["event_id"] = o.EventId
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *RealtimeClientEventInputAudioBufferCommit) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRealtimeClientEventInputAudioBufferCommit := _RealtimeClientEventInputAudioBufferCommit{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRealtimeClientEventInputAudioBufferCommit)

	if err != nil {
		return err
	}

	*o = RealtimeClientEventInputAudioBufferCommit(varRealtimeClientEventInputAudioBufferCommit)

	return err
}

type NullableRealtimeClientEventInputAudioBufferCommit struct {
	value *RealtimeClientEventInputAudioBufferCommit
	isSet bool
}

func (v NullableRealtimeClientEventInputAudioBufferCommit) Get() *RealtimeClientEventInputAudioBufferCommit {
	return v.value
}

func (v *NullableRealtimeClientEventInputAudioBufferCommit) Set(val *RealtimeClientEventInputAudioBufferCommit) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeClientEventInputAudioBufferCommit) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeClientEventInputAudioBufferCommit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeClientEventInputAudioBufferCommit(val *RealtimeClientEventInputAudioBufferCommit) *NullableRealtimeClientEventInputAudioBufferCommit {
	return &NullableRealtimeClientEventInputAudioBufferCommit{value: val, isSet: true}
}

func (v NullableRealtimeClientEventInputAudioBufferCommit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeClientEventInputAudioBufferCommit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


