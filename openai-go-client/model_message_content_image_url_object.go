/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MessageContentImageUrlObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MessageContentImageUrlObject{}

// MessageContentImageUrlObject References an image URL in the content of a message.
type MessageContentImageUrlObject struct {
	// The type of the content part.
	Type string `json:"type"`
	ImageUrl MessageContentImageUrlObjectImageUrl `json:"image_url"`
}

type _MessageContentImageUrlObject MessageContentImageUrlObject

// NewMessageContentImageUrlObject instantiates a new MessageContentImageUrlObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageContentImageUrlObject(type_ string, imageUrl MessageContentImageUrlObjectImageUrl) *MessageContentImageUrlObject {
	this := MessageContentImageUrlObject{}
	this.Type = type_
	this.ImageUrl = imageUrl
	return &this
}

// NewMessageContentImageUrlObjectWithDefaults instantiates a new MessageContentImageUrlObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageContentImageUrlObjectWithDefaults() *MessageContentImageUrlObject {
	this := MessageContentImageUrlObject{}
	return &this
}

// GetType returns the Type field value
func (o *MessageContentImageUrlObject) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MessageContentImageUrlObject) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MessageContentImageUrlObject) SetType(v string) {
	o.Type = v
}

// GetImageUrl returns the ImageUrl field value
func (o *MessageContentImageUrlObject) GetImageUrl() MessageContentImageUrlObjectImageUrl {
	if o == nil {
		var ret MessageContentImageUrlObjectImageUrl
		return ret
	}

	return o.ImageUrl
}

// GetImageUrlOk returns a tuple with the ImageUrl field value
// and a boolean to check if the value has been set.
func (o *MessageContentImageUrlObject) GetImageUrlOk() (*MessageContentImageUrlObjectImageUrl, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ImageUrl, true
}

// SetImageUrl sets field value
func (o *MessageContentImageUrlObject) SetImageUrl(v MessageContentImageUrlObjectImageUrl) {
	o.ImageUrl = v
}

func (o MessageContentImageUrlObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MessageContentImageUrlObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["image_url"] = o.ImageUrl
	return toSerialize, nil
}

func (o *MessageContentImageUrlObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"image_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMessageContentImageUrlObject := _MessageContentImageUrlObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMessageContentImageUrlObject)

	if err != nil {
		return err
	}

	*o = MessageContentImageUrlObject(varMessageContentImageUrlObject)

	return err
}

type NullableMessageContentImageUrlObject struct {
	value *MessageContentImageUrlObject
	isSet bool
}

func (v NullableMessageContentImageUrlObject) Get() *MessageContentImageUrlObject {
	return v.value
}

func (v *NullableMessageContentImageUrlObject) Set(val *MessageContentImageUrlObject) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageContentImageUrlObject) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageContentImageUrlObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageContentImageUrlObject(val *MessageContentImageUrlObject) *NullableMessageContentImageUrlObject {
	return &NullableMessageContentImageUrlObject{value: val, isSet: true}
}

func (v NullableMessageContentImageUrlObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageContentImageUrlObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


