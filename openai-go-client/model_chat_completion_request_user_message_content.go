/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ChatCompletionRequestUserMessageContent - The contents of the user message. 
type ChatCompletionRequestUserMessageContent struct {
	ArrayOfChatCompletionRequestUserMessageContentPart *[]ChatCompletionRequestUserMessageContentPart
	String *string
}

// []ChatCompletionRequestUserMessageContentPartAsChatCompletionRequestUserMessageContent is a convenience function that returns []ChatCompletionRequestUserMessageContentPart wrapped in ChatCompletionRequestUserMessageContent
func ArrayOfChatCompletionRequestUserMessageContentPartAsChatCompletionRequestUserMessageContent(v *[]ChatCompletionRequestUserMessageContentPart) ChatCompletionRequestUserMessageContent {
	return ChatCompletionRequestUserMessageContent{
		ArrayOfChatCompletionRequestUserMessageContentPart: v,
	}
}

// stringAsChatCompletionRequestUserMessageContent is a convenience function that returns string wrapped in ChatCompletionRequestUserMessageContent
func StringAsChatCompletionRequestUserMessageContent(v *string) ChatCompletionRequestUserMessageContent {
	return ChatCompletionRequestUserMessageContent{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ChatCompletionRequestUserMessageContent) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfChatCompletionRequestUserMessageContentPart
	err = newStrictDecoder(data).Decode(&dst.ArrayOfChatCompletionRequestUserMessageContentPart)
	if err == nil {
		jsonArrayOfChatCompletionRequestUserMessageContentPart, _ := json.Marshal(dst.ArrayOfChatCompletionRequestUserMessageContentPart)
		if string(jsonArrayOfChatCompletionRequestUserMessageContentPart) == "{}" { // empty struct
			dst.ArrayOfChatCompletionRequestUserMessageContentPart = nil
		} else {
			if err = validator.Validate(dst.ArrayOfChatCompletionRequestUserMessageContentPart); err != nil {
				dst.ArrayOfChatCompletionRequestUserMessageContentPart = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfChatCompletionRequestUserMessageContentPart = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfChatCompletionRequestUserMessageContentPart = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ChatCompletionRequestUserMessageContent)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ChatCompletionRequestUserMessageContent)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ChatCompletionRequestUserMessageContent) MarshalJSON() ([]byte, error) {
	if src.ArrayOfChatCompletionRequestUserMessageContentPart != nil {
		return json.Marshal(&src.ArrayOfChatCompletionRequestUserMessageContentPart)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ChatCompletionRequestUserMessageContent) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfChatCompletionRequestUserMessageContentPart != nil {
		return obj.ArrayOfChatCompletionRequestUserMessageContentPart
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableChatCompletionRequestUserMessageContent struct {
	value *ChatCompletionRequestUserMessageContent
	isSet bool
}

func (v NullableChatCompletionRequestUserMessageContent) Get() *ChatCompletionRequestUserMessageContent {
	return v.value
}

func (v *NullableChatCompletionRequestUserMessageContent) Set(val *ChatCompletionRequestUserMessageContent) {
	v.value = val
	v.isSet = true
}

func (v NullableChatCompletionRequestUserMessageContent) IsSet() bool {
	return v.isSet
}

func (v *NullableChatCompletionRequestUserMessageContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatCompletionRequestUserMessageContent(val *ChatCompletionRequestUserMessageContent) *NullableChatCompletionRequestUserMessageContent {
	return &NullableChatCompletionRequestUserMessageContent{value: val, isSet: true}
}

func (v NullableChatCompletionRequestUserMessageContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatCompletionRequestUserMessageContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


