/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RealtimeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeResponse{}

// RealtimeResponse The response resource.
type RealtimeResponse struct {
	// The unique ID of the response.
	Id *string `json:"id,omitempty"`
	// The object type, must be `realtime.response`.
	Object *string `json:"object,omitempty"`
	// The final status of the response (`completed`, `cancelled`, `failed`, `incomplete`).
	Status *string `json:"status,omitempty"`
	StatusDetails *RealtimeResponseStatusDetails `json:"status_details,omitempty"`
	// The list of output items generated by the response.
	Output []map[string]interface{} `json:"output,omitempty"`
	Usage *RealtimeResponseUsage `json:"usage,omitempty"`
}

// NewRealtimeResponse instantiates a new RealtimeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeResponse() *RealtimeResponse {
	this := RealtimeResponse{}
	return &this
}

// NewRealtimeResponseWithDefaults instantiates a new RealtimeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeResponseWithDefaults() *RealtimeResponse {
	this := RealtimeResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RealtimeResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RealtimeResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RealtimeResponse) SetId(v string) {
	o.Id = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *RealtimeResponse) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponse) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *RealtimeResponse) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *RealtimeResponse) SetObject(v string) {
	o.Object = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RealtimeResponse) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponse) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RealtimeResponse) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RealtimeResponse) SetStatus(v string) {
	o.Status = &v
}

// GetStatusDetails returns the StatusDetails field value if set, zero value otherwise.
func (o *RealtimeResponse) GetStatusDetails() RealtimeResponseStatusDetails {
	if o == nil || IsNil(o.StatusDetails) {
		var ret RealtimeResponseStatusDetails
		return ret
	}
	return *o.StatusDetails
}

// GetStatusDetailsOk returns a tuple with the StatusDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponse) GetStatusDetailsOk() (*RealtimeResponseStatusDetails, bool) {
	if o == nil || IsNil(o.StatusDetails) {
		return nil, false
	}
	return o.StatusDetails, true
}

// HasStatusDetails returns a boolean if a field has been set.
func (o *RealtimeResponse) HasStatusDetails() bool {
	if o != nil && !IsNil(o.StatusDetails) {
		return true
	}

	return false
}

// SetStatusDetails gets a reference to the given RealtimeResponseStatusDetails and assigns it to the StatusDetails field.
func (o *RealtimeResponse) SetStatusDetails(v RealtimeResponseStatusDetails) {
	o.StatusDetails = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *RealtimeResponse) GetOutput() []map[string]interface{} {
	if o == nil || IsNil(o.Output) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponse) GetOutputOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *RealtimeResponse) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given []map[string]interface{} and assigns it to the Output field.
func (o *RealtimeResponse) SetOutput(v []map[string]interface{}) {
	o.Output = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *RealtimeResponse) GetUsage() RealtimeResponseUsage {
	if o == nil || IsNil(o.Usage) {
		var ret RealtimeResponseUsage
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponse) GetUsageOk() (*RealtimeResponseUsage, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *RealtimeResponse) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given RealtimeResponseUsage and assigns it to the Usage field.
func (o *RealtimeResponse) SetUsage(v RealtimeResponseUsage) {
	o.Usage = &v
}

func (o RealtimeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StatusDetails) {
		toSerialize["status_details"] = o.StatusDetails
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	return toSerialize, nil
}

type NullableRealtimeResponse struct {
	value *RealtimeResponse
	isSet bool
}

func (v NullableRealtimeResponse) Get() *RealtimeResponse {
	return v.value
}

func (v *NullableRealtimeResponse) Set(val *RealtimeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeResponse(val *RealtimeResponse) *NullableRealtimeResponse {
	return &NullableRealtimeResponse{value: val, isSet: true}
}

func (v NullableRealtimeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


