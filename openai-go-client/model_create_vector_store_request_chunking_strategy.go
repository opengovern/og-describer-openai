/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateVectorStoreRequestChunkingStrategy - The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
type CreateVectorStoreRequestChunkingStrategy struct {
	AutoChunkingStrategyRequestParam *AutoChunkingStrategyRequestParam
	StaticChunkingStrategyRequestParam *StaticChunkingStrategyRequestParam
}

// AutoChunkingStrategyRequestParamAsCreateVectorStoreRequestChunkingStrategy is a convenience function that returns AutoChunkingStrategyRequestParam wrapped in CreateVectorStoreRequestChunkingStrategy
func AutoChunkingStrategyRequestParamAsCreateVectorStoreRequestChunkingStrategy(v *AutoChunkingStrategyRequestParam) CreateVectorStoreRequestChunkingStrategy {
	return CreateVectorStoreRequestChunkingStrategy{
		AutoChunkingStrategyRequestParam: v,
	}
}

// StaticChunkingStrategyRequestParamAsCreateVectorStoreRequestChunkingStrategy is a convenience function that returns StaticChunkingStrategyRequestParam wrapped in CreateVectorStoreRequestChunkingStrategy
func StaticChunkingStrategyRequestParamAsCreateVectorStoreRequestChunkingStrategy(v *StaticChunkingStrategyRequestParam) CreateVectorStoreRequestChunkingStrategy {
	return CreateVectorStoreRequestChunkingStrategy{
		StaticChunkingStrategyRequestParam: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateVectorStoreRequestChunkingStrategy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AutoChunkingStrategyRequestParam
	err = newStrictDecoder(data).Decode(&dst.AutoChunkingStrategyRequestParam)
	if err == nil {
		jsonAutoChunkingStrategyRequestParam, _ := json.Marshal(dst.AutoChunkingStrategyRequestParam)
		if string(jsonAutoChunkingStrategyRequestParam) == "{}" { // empty struct
			dst.AutoChunkingStrategyRequestParam = nil
		} else {
			if err = validator.Validate(dst.AutoChunkingStrategyRequestParam); err != nil {
				dst.AutoChunkingStrategyRequestParam = nil
			} else {
				match++
			}
		}
	} else {
		dst.AutoChunkingStrategyRequestParam = nil
	}

	// try to unmarshal data into StaticChunkingStrategyRequestParam
	err = newStrictDecoder(data).Decode(&dst.StaticChunkingStrategyRequestParam)
	if err == nil {
		jsonStaticChunkingStrategyRequestParam, _ := json.Marshal(dst.StaticChunkingStrategyRequestParam)
		if string(jsonStaticChunkingStrategyRequestParam) == "{}" { // empty struct
			dst.StaticChunkingStrategyRequestParam = nil
		} else {
			if err = validator.Validate(dst.StaticChunkingStrategyRequestParam); err != nil {
				dst.StaticChunkingStrategyRequestParam = nil
			} else {
				match++
			}
		}
	} else {
		dst.StaticChunkingStrategyRequestParam = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AutoChunkingStrategyRequestParam = nil
		dst.StaticChunkingStrategyRequestParam = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateVectorStoreRequestChunkingStrategy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateVectorStoreRequestChunkingStrategy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateVectorStoreRequestChunkingStrategy) MarshalJSON() ([]byte, error) {
	if src.AutoChunkingStrategyRequestParam != nil {
		return json.Marshal(&src.AutoChunkingStrategyRequestParam)
	}

	if src.StaticChunkingStrategyRequestParam != nil {
		return json.Marshal(&src.StaticChunkingStrategyRequestParam)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateVectorStoreRequestChunkingStrategy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AutoChunkingStrategyRequestParam != nil {
		return obj.AutoChunkingStrategyRequestParam
	}

	if obj.StaticChunkingStrategyRequestParam != nil {
		return obj.StaticChunkingStrategyRequestParam
	}

	// all schemas are nil
	return nil
}

type NullableCreateVectorStoreRequestChunkingStrategy struct {
	value *CreateVectorStoreRequestChunkingStrategy
	isSet bool
}

func (v NullableCreateVectorStoreRequestChunkingStrategy) Get() *CreateVectorStoreRequestChunkingStrategy {
	return v.value
}

func (v *NullableCreateVectorStoreRequestChunkingStrategy) Set(val *CreateVectorStoreRequestChunkingStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVectorStoreRequestChunkingStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVectorStoreRequestChunkingStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVectorStoreRequestChunkingStrategy(val *CreateVectorStoreRequestChunkingStrategy) *NullableCreateVectorStoreRequestChunkingStrategy {
	return &NullableCreateVectorStoreRequestChunkingStrategy{value: val, isSet: true}
}

func (v NullableCreateVectorStoreRequestChunkingStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVectorStoreRequestChunkingStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


