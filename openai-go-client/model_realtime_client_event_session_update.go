/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RealtimeClientEventSessionUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeClientEventSessionUpdate{}

// RealtimeClientEventSessionUpdate Send this event to update the sessionâ€™s default configuration. The client may send this event at any time to update the session configuration, and any field may be updated at any time, except for \"voice\". The server will respond with a `session.updated` event that shows the full effective configuration. Only fields that are present are updated, thus the correct way to clear a field like \"instructions\" is to pass an empty string.
type RealtimeClientEventSessionUpdate struct {
	// Optional client-generated ID used to identify this event.
	EventId *string `json:"event_id,omitempty"`
	// The event type, must be \"session.update\".
	Type string `json:"type"`
	Session RealtimeSession `json:"session"`
}

type _RealtimeClientEventSessionUpdate RealtimeClientEventSessionUpdate

// NewRealtimeClientEventSessionUpdate instantiates a new RealtimeClientEventSessionUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeClientEventSessionUpdate(type_ string, session RealtimeSession) *RealtimeClientEventSessionUpdate {
	this := RealtimeClientEventSessionUpdate{}
	this.Type = type_
	this.Session = session
	return &this
}

// NewRealtimeClientEventSessionUpdateWithDefaults instantiates a new RealtimeClientEventSessionUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeClientEventSessionUpdateWithDefaults() *RealtimeClientEventSessionUpdate {
	this := RealtimeClientEventSessionUpdate{}
	return &this
}

// GetEventId returns the EventId field value if set, zero value otherwise.
func (o *RealtimeClientEventSessionUpdate) GetEventId() string {
	if o == nil || IsNil(o.EventId) {
		var ret string
		return ret
	}
	return *o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeClientEventSessionUpdate) GetEventIdOk() (*string, bool) {
	if o == nil || IsNil(o.EventId) {
		return nil, false
	}
	return o.EventId, true
}

// HasEventId returns a boolean if a field has been set.
func (o *RealtimeClientEventSessionUpdate) HasEventId() bool {
	if o != nil && !IsNil(o.EventId) {
		return true
	}

	return false
}

// SetEventId gets a reference to the given string and assigns it to the EventId field.
func (o *RealtimeClientEventSessionUpdate) SetEventId(v string) {
	o.EventId = &v
}

// GetType returns the Type field value
func (o *RealtimeClientEventSessionUpdate) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RealtimeClientEventSessionUpdate) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RealtimeClientEventSessionUpdate) SetType(v string) {
	o.Type = v
}

// GetSession returns the Session field value
func (o *RealtimeClientEventSessionUpdate) GetSession() RealtimeSession {
	if o == nil {
		var ret RealtimeSession
		return ret
	}

	return o.Session
}

// GetSessionOk returns a tuple with the Session field value
// and a boolean to check if the value has been set.
func (o *RealtimeClientEventSessionUpdate) GetSessionOk() (*RealtimeSession, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Session, true
}

// SetSession sets field value
func (o *RealtimeClientEventSessionUpdate) SetSession(v RealtimeSession) {
	o.Session = v
}

func (o RealtimeClientEventSessionUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeClientEventSessionUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EventId) {
		toSerialize["event_id"] = o.EventId
	}
	toSerialize["type"] = o.Type
	toSerialize["session"] = o.Session
	return toSerialize, nil
}

func (o *RealtimeClientEventSessionUpdate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"session",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRealtimeClientEventSessionUpdate := _RealtimeClientEventSessionUpdate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRealtimeClientEventSessionUpdate)

	if err != nil {
		return err
	}

	*o = RealtimeClientEventSessionUpdate(varRealtimeClientEventSessionUpdate)

	return err
}

type NullableRealtimeClientEventSessionUpdate struct {
	value *RealtimeClientEventSessionUpdate
	isSet bool
}

func (v NullableRealtimeClientEventSessionUpdate) Get() *RealtimeClientEventSessionUpdate {
	return v.value
}

func (v *NullableRealtimeClientEventSessionUpdate) Set(val *RealtimeClientEventSessionUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeClientEventSessionUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeClientEventSessionUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeClientEventSessionUpdate(val *RealtimeClientEventSessionUpdate) *NullableRealtimeClientEventSessionUpdate {
	return &NullableRealtimeClientEventSessionUpdate{value: val, isSet: true}
}

func (v NullableRealtimeClientEventSessionUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeClientEventSessionUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


