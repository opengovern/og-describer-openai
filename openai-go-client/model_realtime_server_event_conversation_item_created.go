/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RealtimeServerEventConversationItemCreated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeServerEventConversationItemCreated{}

// RealtimeServerEventConversationItemCreated Returned when a conversation item is created. There are several scenarios that produce this event:   - The server is generating a Response, which if successful will produce either one or two Items, which will be of type `message` (role `assistant`) or type `function_call`.   - The input audio buffer has been committed, either by the client or the server (in `server_vad` mode). The server will take the content of the input audio buffer and add it to a new user message Item.   - The client has sent a `conversation.item.create` event to add a new Item to the Conversation.
type RealtimeServerEventConversationItemCreated struct {
	// The unique ID of the server event.
	EventId string `json:"event_id"`
	// The event type, must be `conversation.item.created`.
	Type string `json:"type"`
	// The ID of the preceding item in the Conversation context, allows the client to understand the order of the conversation.
	PreviousItemId string `json:"previous_item_id"`
	Item RealtimeConversationItem `json:"item"`
}

type _RealtimeServerEventConversationItemCreated RealtimeServerEventConversationItemCreated

// NewRealtimeServerEventConversationItemCreated instantiates a new RealtimeServerEventConversationItemCreated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeServerEventConversationItemCreated(eventId string, type_ string, previousItemId string, item RealtimeConversationItem) *RealtimeServerEventConversationItemCreated {
	this := RealtimeServerEventConversationItemCreated{}
	this.EventId = eventId
	this.Type = type_
	this.PreviousItemId = previousItemId
	this.Item = item
	return &this
}

// NewRealtimeServerEventConversationItemCreatedWithDefaults instantiates a new RealtimeServerEventConversationItemCreated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeServerEventConversationItemCreatedWithDefaults() *RealtimeServerEventConversationItemCreated {
	this := RealtimeServerEventConversationItemCreated{}
	return &this
}

// GetEventId returns the EventId field value
func (o *RealtimeServerEventConversationItemCreated) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventConversationItemCreated) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *RealtimeServerEventConversationItemCreated) SetEventId(v string) {
	o.EventId = v
}

// GetType returns the Type field value
func (o *RealtimeServerEventConversationItemCreated) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventConversationItemCreated) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RealtimeServerEventConversationItemCreated) SetType(v string) {
	o.Type = v
}

// GetPreviousItemId returns the PreviousItemId field value
func (o *RealtimeServerEventConversationItemCreated) GetPreviousItemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreviousItemId
}

// GetPreviousItemIdOk returns a tuple with the PreviousItemId field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventConversationItemCreated) GetPreviousItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreviousItemId, true
}

// SetPreviousItemId sets field value
func (o *RealtimeServerEventConversationItemCreated) SetPreviousItemId(v string) {
	o.PreviousItemId = v
}

// GetItem returns the Item field value
func (o *RealtimeServerEventConversationItemCreated) GetItem() RealtimeConversationItem {
	if o == nil {
		var ret RealtimeConversationItem
		return ret
	}

	return o.Item
}

// GetItemOk returns a tuple with the Item field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventConversationItemCreated) GetItemOk() (*RealtimeConversationItem, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Item, true
}

// SetItem sets field value
func (o *RealtimeServerEventConversationItemCreated) SetItem(v RealtimeConversationItem) {
	o.Item = v
}

func (o RealtimeServerEventConversationItemCreated) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeServerEventConversationItemCreated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_id"] = o.EventId
	toSerialize["type"] = o.Type
	toSerialize["previous_item_id"] = o.PreviousItemId
	toSerialize["item"] = o.Item
	return toSerialize, nil
}

func (o *RealtimeServerEventConversationItemCreated) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_id",
		"type",
		"previous_item_id",
		"item",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRealtimeServerEventConversationItemCreated := _RealtimeServerEventConversationItemCreated{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRealtimeServerEventConversationItemCreated)

	if err != nil {
		return err
	}

	*o = RealtimeServerEventConversationItemCreated(varRealtimeServerEventConversationItemCreated)

	return err
}

type NullableRealtimeServerEventConversationItemCreated struct {
	value *RealtimeServerEventConversationItemCreated
	isSet bool
}

func (v NullableRealtimeServerEventConversationItemCreated) Get() *RealtimeServerEventConversationItemCreated {
	return v.value
}

func (v *NullableRealtimeServerEventConversationItemCreated) Set(val *RealtimeServerEventConversationItemCreated) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeServerEventConversationItemCreated) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeServerEventConversationItemCreated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeServerEventConversationItemCreated(val *RealtimeServerEventConversationItemCreated) *NullableRealtimeServerEventConversationItemCreated {
	return &NullableRealtimeServerEventConversationItemCreated{value: val, isSet: true}
}

func (v NullableRealtimeServerEventConversationItemCreated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeServerEventConversationItemCreated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


