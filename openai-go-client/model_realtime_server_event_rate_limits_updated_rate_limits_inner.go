/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RealtimeServerEventRateLimitsUpdatedRateLimitsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeServerEventRateLimitsUpdatedRateLimitsInner{}

// RealtimeServerEventRateLimitsUpdatedRateLimitsInner struct for RealtimeServerEventRateLimitsUpdatedRateLimitsInner
type RealtimeServerEventRateLimitsUpdatedRateLimitsInner struct {
	// The name of the rate limit (`requests`, `tokens`).
	Name *string `json:"name,omitempty"`
	// The maximum allowed value for the rate limit.
	Limit *int32 `json:"limit,omitempty"`
	// The remaining value before the limit is reached.
	Remaining *int32 `json:"remaining,omitempty"`
	// Seconds until the rate limit resets.
	ResetSeconds *float32 `json:"reset_seconds,omitempty"`
}

// NewRealtimeServerEventRateLimitsUpdatedRateLimitsInner instantiates a new RealtimeServerEventRateLimitsUpdatedRateLimitsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeServerEventRateLimitsUpdatedRateLimitsInner() *RealtimeServerEventRateLimitsUpdatedRateLimitsInner {
	this := RealtimeServerEventRateLimitsUpdatedRateLimitsInner{}
	return &this
}

// NewRealtimeServerEventRateLimitsUpdatedRateLimitsInnerWithDefaults instantiates a new RealtimeServerEventRateLimitsUpdatedRateLimitsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeServerEventRateLimitsUpdatedRateLimitsInnerWithDefaults() *RealtimeServerEventRateLimitsUpdatedRateLimitsInner {
	this := RealtimeServerEventRateLimitsUpdatedRateLimitsInner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) SetName(v string) {
	o.Name = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) GetLimit() int32 {
	if o == nil || IsNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) GetLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) SetLimit(v int32) {
	o.Limit = &v
}

// GetRemaining returns the Remaining field value if set, zero value otherwise.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) GetRemaining() int32 {
	if o == nil || IsNil(o.Remaining) {
		var ret int32
		return ret
	}
	return *o.Remaining
}

// GetRemainingOk returns a tuple with the Remaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) GetRemainingOk() (*int32, bool) {
	if o == nil || IsNil(o.Remaining) {
		return nil, false
	}
	return o.Remaining, true
}

// HasRemaining returns a boolean if a field has been set.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) HasRemaining() bool {
	if o != nil && !IsNil(o.Remaining) {
		return true
	}

	return false
}

// SetRemaining gets a reference to the given int32 and assigns it to the Remaining field.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) SetRemaining(v int32) {
	o.Remaining = &v
}

// GetResetSeconds returns the ResetSeconds field value if set, zero value otherwise.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) GetResetSeconds() float32 {
	if o == nil || IsNil(o.ResetSeconds) {
		var ret float32
		return ret
	}
	return *o.ResetSeconds
}

// GetResetSecondsOk returns a tuple with the ResetSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) GetResetSecondsOk() (*float32, bool) {
	if o == nil || IsNil(o.ResetSeconds) {
		return nil, false
	}
	return o.ResetSeconds, true
}

// HasResetSeconds returns a boolean if a field has been set.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) HasResetSeconds() bool {
	if o != nil && !IsNil(o.ResetSeconds) {
		return true
	}

	return false
}

// SetResetSeconds gets a reference to the given float32 and assigns it to the ResetSeconds field.
func (o *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) SetResetSeconds(v float32) {
	o.ResetSeconds = &v
}

func (o RealtimeServerEventRateLimitsUpdatedRateLimitsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeServerEventRateLimitsUpdatedRateLimitsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.Remaining) {
		toSerialize["remaining"] = o.Remaining
	}
	if !IsNil(o.ResetSeconds) {
		toSerialize["reset_seconds"] = o.ResetSeconds
	}
	return toSerialize, nil
}

type NullableRealtimeServerEventRateLimitsUpdatedRateLimitsInner struct {
	value *RealtimeServerEventRateLimitsUpdatedRateLimitsInner
	isSet bool
}

func (v NullableRealtimeServerEventRateLimitsUpdatedRateLimitsInner) Get() *RealtimeServerEventRateLimitsUpdatedRateLimitsInner {
	return v.value
}

func (v *NullableRealtimeServerEventRateLimitsUpdatedRateLimitsInner) Set(val *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeServerEventRateLimitsUpdatedRateLimitsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeServerEventRateLimitsUpdatedRateLimitsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeServerEventRateLimitsUpdatedRateLimitsInner(val *RealtimeServerEventRateLimitsUpdatedRateLimitsInner) *NullableRealtimeServerEventRateLimitsUpdatedRateLimitsInner {
	return &NullableRealtimeServerEventRateLimitsUpdatedRateLimitsInner{value: val, isSet: true}
}

func (v NullableRealtimeServerEventRateLimitsUpdatedRateLimitsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeServerEventRateLimitsUpdatedRateLimitsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


