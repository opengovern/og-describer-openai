/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BatchRequestCounts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchRequestCounts{}

// BatchRequestCounts The request counts for different statuses within the batch.
type BatchRequestCounts struct {
	// Total number of requests in the batch.
	Total int32 `json:"total"`
	// Number of requests that have been completed successfully.
	Completed int32 `json:"completed"`
	// Number of requests that have failed.
	Failed int32 `json:"failed"`
}

type _BatchRequestCounts BatchRequestCounts

// NewBatchRequestCounts instantiates a new BatchRequestCounts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchRequestCounts(total int32, completed int32, failed int32) *BatchRequestCounts {
	this := BatchRequestCounts{}
	this.Total = total
	this.Completed = completed
	this.Failed = failed
	return &this
}

// NewBatchRequestCountsWithDefaults instantiates a new BatchRequestCounts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchRequestCountsWithDefaults() *BatchRequestCounts {
	this := BatchRequestCounts{}
	return &this
}

// GetTotal returns the Total field value
func (o *BatchRequestCounts) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *BatchRequestCounts) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *BatchRequestCounts) SetTotal(v int32) {
	o.Total = v
}

// GetCompleted returns the Completed field value
func (o *BatchRequestCounts) GetCompleted() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value
// and a boolean to check if the value has been set.
func (o *BatchRequestCounts) GetCompletedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Completed, true
}

// SetCompleted sets field value
func (o *BatchRequestCounts) SetCompleted(v int32) {
	o.Completed = v
}

// GetFailed returns the Failed field value
func (o *BatchRequestCounts) GetFailed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Failed
}

// GetFailedOk returns a tuple with the Failed field value
// and a boolean to check if the value has been set.
func (o *BatchRequestCounts) GetFailedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Failed, true
}

// SetFailed sets field value
func (o *BatchRequestCounts) SetFailed(v int32) {
	o.Failed = v
}

func (o BatchRequestCounts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchRequestCounts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["total"] = o.Total
	toSerialize["completed"] = o.Completed
	toSerialize["failed"] = o.Failed
	return toSerialize, nil
}

func (o *BatchRequestCounts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total",
		"completed",
		"failed",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchRequestCounts := _BatchRequestCounts{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBatchRequestCounts)

	if err != nil {
		return err
	}

	*o = BatchRequestCounts(varBatchRequestCounts)

	return err
}

type NullableBatchRequestCounts struct {
	value *BatchRequestCounts
	isSet bool
}

func (v NullableBatchRequestCounts) Get() *BatchRequestCounts {
	return v.value
}

func (v *NullableBatchRequestCounts) Set(val *BatchRequestCounts) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchRequestCounts) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchRequestCounts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchRequestCounts(val *BatchRequestCounts) *NullableBatchRequestCounts {
	return &NullableBatchRequestCounts{value: val, isSet: true}
}

func (v NullableBatchRequestCounts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchRequestCounts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


