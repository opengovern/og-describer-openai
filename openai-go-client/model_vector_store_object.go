/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VectorStoreObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VectorStoreObject{}

// VectorStoreObject A vector store is a collection of processed files can be used by the `file_search` tool.
type VectorStoreObject struct {
	// The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`
	// The object type, which is always `vector_store`.
	Object string `json:"object"`
	// The Unix timestamp (in seconds) for when the vector store was created.
	CreatedAt int32 `json:"created_at"`
	// The name of the vector store.
	Name string `json:"name"`
	// The total number of bytes used by the files in the vector store.
	UsageBytes int32 `json:"usage_bytes"`
	FileCounts VectorStoreObjectFileCounts `json:"file_counts"`
	// The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
	Status string `json:"status"`
	ExpiresAfter *VectorStoreExpirationAfter `json:"expires_after,omitempty"`
	// The Unix timestamp (in seconds) for when the vector store will expire.
	ExpiresAt NullableInt32 `json:"expires_at,omitempty"`
	// The Unix timestamp (in seconds) for when the vector store was last active.
	LastActiveAt NullableInt32 `json:"last_active_at"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long. 
	Metadata map[string]interface{} `json:"metadata"`
}

type _VectorStoreObject VectorStoreObject

// NewVectorStoreObject instantiates a new VectorStoreObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVectorStoreObject(id string, object string, createdAt int32, name string, usageBytes int32, fileCounts VectorStoreObjectFileCounts, status string, lastActiveAt NullableInt32, metadata map[string]interface{}) *VectorStoreObject {
	this := VectorStoreObject{}
	this.Id = id
	this.Object = object
	this.CreatedAt = createdAt
	this.Name = name
	this.UsageBytes = usageBytes
	this.FileCounts = fileCounts
	this.Status = status
	this.LastActiveAt = lastActiveAt
	this.Metadata = metadata
	return &this
}

// NewVectorStoreObjectWithDefaults instantiates a new VectorStoreObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVectorStoreObjectWithDefaults() *VectorStoreObject {
	this := VectorStoreObject{}
	return &this
}

// GetId returns the Id field value
func (o *VectorStoreObject) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VectorStoreObject) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VectorStoreObject) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value
func (o *VectorStoreObject) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *VectorStoreObject) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *VectorStoreObject) SetObject(v string) {
	o.Object = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *VectorStoreObject) GetCreatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *VectorStoreObject) GetCreatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *VectorStoreObject) SetCreatedAt(v int32) {
	o.CreatedAt = v
}

// GetName returns the Name field value
func (o *VectorStoreObject) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VectorStoreObject) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VectorStoreObject) SetName(v string) {
	o.Name = v
}

// GetUsageBytes returns the UsageBytes field value
func (o *VectorStoreObject) GetUsageBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UsageBytes
}

// GetUsageBytesOk returns a tuple with the UsageBytes field value
// and a boolean to check if the value has been set.
func (o *VectorStoreObject) GetUsageBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsageBytes, true
}

// SetUsageBytes sets field value
func (o *VectorStoreObject) SetUsageBytes(v int32) {
	o.UsageBytes = v
}

// GetFileCounts returns the FileCounts field value
func (o *VectorStoreObject) GetFileCounts() VectorStoreObjectFileCounts {
	if o == nil {
		var ret VectorStoreObjectFileCounts
		return ret
	}

	return o.FileCounts
}

// GetFileCountsOk returns a tuple with the FileCounts field value
// and a boolean to check if the value has been set.
func (o *VectorStoreObject) GetFileCountsOk() (*VectorStoreObjectFileCounts, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileCounts, true
}

// SetFileCounts sets field value
func (o *VectorStoreObject) SetFileCounts(v VectorStoreObjectFileCounts) {
	o.FileCounts = v
}

// GetStatus returns the Status field value
func (o *VectorStoreObject) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *VectorStoreObject) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *VectorStoreObject) SetStatus(v string) {
	o.Status = v
}

// GetExpiresAfter returns the ExpiresAfter field value if set, zero value otherwise.
func (o *VectorStoreObject) GetExpiresAfter() VectorStoreExpirationAfter {
	if o == nil || IsNil(o.ExpiresAfter) {
		var ret VectorStoreExpirationAfter
		return ret
	}
	return *o.ExpiresAfter
}

// GetExpiresAfterOk returns a tuple with the ExpiresAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VectorStoreObject) GetExpiresAfterOk() (*VectorStoreExpirationAfter, bool) {
	if o == nil || IsNil(o.ExpiresAfter) {
		return nil, false
	}
	return o.ExpiresAfter, true
}

// HasExpiresAfter returns a boolean if a field has been set.
func (o *VectorStoreObject) HasExpiresAfter() bool {
	if o != nil && !IsNil(o.ExpiresAfter) {
		return true
	}

	return false
}

// SetExpiresAfter gets a reference to the given VectorStoreExpirationAfter and assigns it to the ExpiresAfter field.
func (o *VectorStoreObject) SetExpiresAfter(v VectorStoreExpirationAfter) {
	o.ExpiresAfter = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VectorStoreObject) GetExpiresAt() int32 {
	if o == nil || IsNil(o.ExpiresAt.Get()) {
		var ret int32
		return ret
	}
	return *o.ExpiresAt.Get()
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VectorStoreObject) GetExpiresAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiresAt.Get(), o.ExpiresAt.IsSet()
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *VectorStoreObject) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt.IsSet() {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given NullableInt32 and assigns it to the ExpiresAt field.
func (o *VectorStoreObject) SetExpiresAt(v int32) {
	o.ExpiresAt.Set(&v)
}
// SetExpiresAtNil sets the value for ExpiresAt to be an explicit nil
func (o *VectorStoreObject) SetExpiresAtNil() {
	o.ExpiresAt.Set(nil)
}

// UnsetExpiresAt ensures that no value is present for ExpiresAt, not even an explicit nil
func (o *VectorStoreObject) UnsetExpiresAt() {
	o.ExpiresAt.Unset()
}

// GetLastActiveAt returns the LastActiveAt field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *VectorStoreObject) GetLastActiveAt() int32 {
	if o == nil || o.LastActiveAt.Get() == nil {
		var ret int32
		return ret
	}

	return *o.LastActiveAt.Get()
}

// GetLastActiveAtOk returns a tuple with the LastActiveAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VectorStoreObject) GetLastActiveAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastActiveAt.Get(), o.LastActiveAt.IsSet()
}

// SetLastActiveAt sets field value
func (o *VectorStoreObject) SetLastActiveAt(v int32) {
	o.LastActiveAt.Set(&v)
}

// GetMetadata returns the Metadata field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *VectorStoreObject) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VectorStoreObject) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *VectorStoreObject) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o VectorStoreObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VectorStoreObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["object"] = o.Object
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["name"] = o.Name
	toSerialize["usage_bytes"] = o.UsageBytes
	toSerialize["file_counts"] = o.FileCounts
	toSerialize["status"] = o.Status
	if !IsNil(o.ExpiresAfter) {
		toSerialize["expires_after"] = o.ExpiresAfter
	}
	if o.ExpiresAt.IsSet() {
		toSerialize["expires_at"] = o.ExpiresAt.Get()
	}
	toSerialize["last_active_at"] = o.LastActiveAt.Get()
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *VectorStoreObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"object",
		"created_at",
		"name",
		"usage_bytes",
		"file_counts",
		"status",
		"last_active_at",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVectorStoreObject := _VectorStoreObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVectorStoreObject)

	if err != nil {
		return err
	}

	*o = VectorStoreObject(varVectorStoreObject)

	return err
}

type NullableVectorStoreObject struct {
	value *VectorStoreObject
	isSet bool
}

func (v NullableVectorStoreObject) Get() *VectorStoreObject {
	return v.value
}

func (v *NullableVectorStoreObject) Set(val *VectorStoreObject) {
	v.value = val
	v.isSet = true
}

func (v NullableVectorStoreObject) IsSet() bool {
	return v.isSet
}

func (v *NullableVectorStoreObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVectorStoreObject(val *VectorStoreObject) *NullableVectorStoreObject {
	return &NullableVectorStoreObject{value: val, isSet: true}
}

func (v NullableVectorStoreObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVectorStoreObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


