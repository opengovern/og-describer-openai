/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UploadPart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadPart{}

// UploadPart The upload Part represents a chunk of bytes we can add to an Upload object. 
type UploadPart struct {
	// The upload Part unique identifier, which can be referenced in API endpoints.
	Id string `json:"id"`
	// The Unix timestamp (in seconds) for when the Part was created.
	CreatedAt int32 `json:"created_at"`
	// The ID of the Upload object that this Part was added to.
	UploadId string `json:"upload_id"`
	// The object type, which is always `upload.part`.
	Object string `json:"object"`
}

type _UploadPart UploadPart

// NewUploadPart instantiates a new UploadPart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadPart(id string, createdAt int32, uploadId string, object string) *UploadPart {
	this := UploadPart{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UploadId = uploadId
	this.Object = object
	return &this
}

// NewUploadPartWithDefaults instantiates a new UploadPart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadPartWithDefaults() *UploadPart {
	this := UploadPart{}
	return &this
}

// GetId returns the Id field value
func (o *UploadPart) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UploadPart) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UploadPart) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *UploadPart) GetCreatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UploadPart) GetCreatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UploadPart) SetCreatedAt(v int32) {
	o.CreatedAt = v
}

// GetUploadId returns the UploadId field value
func (o *UploadPart) GetUploadId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadId
}

// GetUploadIdOk returns a tuple with the UploadId field value
// and a boolean to check if the value has been set.
func (o *UploadPart) GetUploadIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadId, true
}

// SetUploadId sets field value
func (o *UploadPart) SetUploadId(v string) {
	o.UploadId = v
}

// GetObject returns the Object field value
func (o *UploadPart) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *UploadPart) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *UploadPart) SetObject(v string) {
	o.Object = v
}

func (o UploadPart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadPart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["upload_id"] = o.UploadId
	toSerialize["object"] = o.Object
	return toSerialize, nil
}

func (o *UploadPart) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"upload_id",
		"object",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUploadPart := _UploadPart{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUploadPart)

	if err != nil {
		return err
	}

	*o = UploadPart(varUploadPart)

	return err
}

type NullableUploadPart struct {
	value *UploadPart
	isSet bool
}

func (v NullableUploadPart) Get() *UploadPart {
	return v.value
}

func (v *NullableUploadPart) Set(val *UploadPart) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadPart) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadPart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadPart(val *UploadPart) *NullableUploadPart {
	return &NullableUploadPart{value: val, isSet: true}
}

func (v NullableUploadPart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadPart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


