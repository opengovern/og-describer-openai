/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssistantObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssistantObject{}

// AssistantObject Represents an `assistant` that can call the model and use tools.
type AssistantObject struct {
	// The identifier, which can be referenced in API endpoints.
	Id string `json:"id"`
	// The object type, which is always `assistant`.
	Object string `json:"object"`
	// The Unix timestamp (in seconds) for when the assistant was created.
	CreatedAt int32 `json:"created_at"`
	// The name of the assistant. The maximum length is 256 characters. 
	Name NullableString `json:"name"`
	// The description of the assistant. The maximum length is 512 characters. 
	Description NullableString `json:"description"`
	// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them. 
	Model string `json:"model"`
	// The system instructions that the assistant uses. The maximum length is 256,000 characters. 
	Instructions NullableString `json:"instructions"`
	// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`. 
	Tools []AssistantObjectToolsInner `json:"tools"`
	ToolResources NullableAssistantObjectToolResources `json:"tool_resources,omitempty"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long. 
	Metadata map[string]interface{} `json:"metadata"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. 
	Temperature NullableFloat32 `json:"temperature,omitempty"`
	// An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or temperature but not both. 
	TopP NullableFloat32 `json:"top_p,omitempty"`
	ResponseFormat *AssistantsApiResponseFormatOption `json:"response_format,omitempty"`
}

type _AssistantObject AssistantObject

// NewAssistantObject instantiates a new AssistantObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssistantObject(id string, object string, createdAt int32, name NullableString, description NullableString, model string, instructions NullableString, tools []AssistantObjectToolsInner, metadata map[string]interface{}) *AssistantObject {
	this := AssistantObject{}
	this.Id = id
	this.Object = object
	this.CreatedAt = createdAt
	this.Name = name
	this.Description = description
	this.Model = model
	this.Instructions = instructions
	this.Tools = tools
	this.Metadata = metadata
	var temperature float32 = 1
	this.Temperature = *NewNullableFloat32(&temperature)
	var topP float32 = 1
	this.TopP = *NewNullableFloat32(&topP)
	return &this
}

// NewAssistantObjectWithDefaults instantiates a new AssistantObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssistantObjectWithDefaults() *AssistantObject {
	this := AssistantObject{}
	var temperature float32 = 1
	this.Temperature = *NewNullableFloat32(&temperature)
	var topP float32 = 1
	this.TopP = *NewNullableFloat32(&topP)
	return &this
}

// GetId returns the Id field value
func (o *AssistantObject) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AssistantObject) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AssistantObject) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value
func (o *AssistantObject) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *AssistantObject) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *AssistantObject) SetObject(v string) {
	o.Object = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *AssistantObject) GetCreatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *AssistantObject) GetCreatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *AssistantObject) SetCreatedAt(v int32) {
	o.CreatedAt = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssistantObject) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantObject) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *AssistantObject) SetName(v string) {
	o.Name.Set(&v)
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssistantObject) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantObject) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *AssistantObject) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetModel returns the Model field value
func (o *AssistantObject) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *AssistantObject) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *AssistantObject) SetModel(v string) {
	o.Model = v
}

// GetInstructions returns the Instructions field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssistantObject) GetInstructions() string {
	if o == nil || o.Instructions.Get() == nil {
		var ret string
		return ret
	}

	return *o.Instructions.Get()
}

// GetInstructionsOk returns a tuple with the Instructions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantObject) GetInstructionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instructions.Get(), o.Instructions.IsSet()
}

// SetInstructions sets field value
func (o *AssistantObject) SetInstructions(v string) {
	o.Instructions.Set(&v)
}

// GetTools returns the Tools field value
func (o *AssistantObject) GetTools() []AssistantObjectToolsInner {
	if o == nil {
		var ret []AssistantObjectToolsInner
		return ret
	}

	return o.Tools
}

// GetToolsOk returns a tuple with the Tools field value
// and a boolean to check if the value has been set.
func (o *AssistantObject) GetToolsOk() ([]AssistantObjectToolsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tools, true
}

// SetTools sets field value
func (o *AssistantObject) SetTools(v []AssistantObjectToolsInner) {
	o.Tools = v
}

// GetToolResources returns the ToolResources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssistantObject) GetToolResources() AssistantObjectToolResources {
	if o == nil || IsNil(o.ToolResources.Get()) {
		var ret AssistantObjectToolResources
		return ret
	}
	return *o.ToolResources.Get()
}

// GetToolResourcesOk returns a tuple with the ToolResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantObject) GetToolResourcesOk() (*AssistantObjectToolResources, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToolResources.Get(), o.ToolResources.IsSet()
}

// HasToolResources returns a boolean if a field has been set.
func (o *AssistantObject) HasToolResources() bool {
	if o != nil && o.ToolResources.IsSet() {
		return true
	}

	return false
}

// SetToolResources gets a reference to the given NullableAssistantObjectToolResources and assigns it to the ToolResources field.
func (o *AssistantObject) SetToolResources(v AssistantObjectToolResources) {
	o.ToolResources.Set(&v)
}
// SetToolResourcesNil sets the value for ToolResources to be an explicit nil
func (o *AssistantObject) SetToolResourcesNil() {
	o.ToolResources.Set(nil)
}

// UnsetToolResources ensures that no value is present for ToolResources, not even an explicit nil
func (o *AssistantObject) UnsetToolResources() {
	o.ToolResources.Unset()
}

// GetMetadata returns the Metadata field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *AssistantObject) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantObject) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// SetMetadata sets field value
func (o *AssistantObject) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssistantObject) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature.Get()) {
		var ret float32
		return ret
	}
	return *o.Temperature.Get()
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantObject) GetTemperatureOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Temperature.Get(), o.Temperature.IsSet()
}

// HasTemperature returns a boolean if a field has been set.
func (o *AssistantObject) HasTemperature() bool {
	if o != nil && o.Temperature.IsSet() {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given NullableFloat32 and assigns it to the Temperature field.
func (o *AssistantObject) SetTemperature(v float32) {
	o.Temperature.Set(&v)
}
// SetTemperatureNil sets the value for Temperature to be an explicit nil
func (o *AssistantObject) SetTemperatureNil() {
	o.Temperature.Set(nil)
}

// UnsetTemperature ensures that no value is present for Temperature, not even an explicit nil
func (o *AssistantObject) UnsetTemperature() {
	o.Temperature.Unset()
}

// GetTopP returns the TopP field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AssistantObject) GetTopP() float32 {
	if o == nil || IsNil(o.TopP.Get()) {
		var ret float32
		return ret
	}
	return *o.TopP.Get()
}

// GetTopPOk returns a tuple with the TopP field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssistantObject) GetTopPOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopP.Get(), o.TopP.IsSet()
}

// HasTopP returns a boolean if a field has been set.
func (o *AssistantObject) HasTopP() bool {
	if o != nil && o.TopP.IsSet() {
		return true
	}

	return false
}

// SetTopP gets a reference to the given NullableFloat32 and assigns it to the TopP field.
func (o *AssistantObject) SetTopP(v float32) {
	o.TopP.Set(&v)
}
// SetTopPNil sets the value for TopP to be an explicit nil
func (o *AssistantObject) SetTopPNil() {
	o.TopP.Set(nil)
}

// UnsetTopP ensures that no value is present for TopP, not even an explicit nil
func (o *AssistantObject) UnsetTopP() {
	o.TopP.Unset()
}

// GetResponseFormat returns the ResponseFormat field value if set, zero value otherwise.
func (o *AssistantObject) GetResponseFormat() AssistantsApiResponseFormatOption {
	if o == nil || IsNil(o.ResponseFormat) {
		var ret AssistantsApiResponseFormatOption
		return ret
	}
	return *o.ResponseFormat
}

// GetResponseFormatOk returns a tuple with the ResponseFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantObject) GetResponseFormatOk() (*AssistantsApiResponseFormatOption, bool) {
	if o == nil || IsNil(o.ResponseFormat) {
		return nil, false
	}
	return o.ResponseFormat, true
}

// HasResponseFormat returns a boolean if a field has been set.
func (o *AssistantObject) HasResponseFormat() bool {
	if o != nil && !IsNil(o.ResponseFormat) {
		return true
	}

	return false
}

// SetResponseFormat gets a reference to the given AssistantsApiResponseFormatOption and assigns it to the ResponseFormat field.
func (o *AssistantObject) SetResponseFormat(v AssistantsApiResponseFormatOption) {
	o.ResponseFormat = &v
}

func (o AssistantObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssistantObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["object"] = o.Object
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["name"] = o.Name.Get()
	toSerialize["description"] = o.Description.Get()
	toSerialize["model"] = o.Model
	toSerialize["instructions"] = o.Instructions.Get()
	toSerialize["tools"] = o.Tools
	if o.ToolResources.IsSet() {
		toSerialize["tool_resources"] = o.ToolResources.Get()
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Temperature.IsSet() {
		toSerialize["temperature"] = o.Temperature.Get()
	}
	if o.TopP.IsSet() {
		toSerialize["top_p"] = o.TopP.Get()
	}
	if !IsNil(o.ResponseFormat) {
		toSerialize["response_format"] = o.ResponseFormat
	}
	return toSerialize, nil
}

func (o *AssistantObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"object",
		"created_at",
		"name",
		"description",
		"model",
		"instructions",
		"tools",
		"metadata",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssistantObject := _AssistantObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssistantObject)

	if err != nil {
		return err
	}

	*o = AssistantObject(varAssistantObject)

	return err
}

type NullableAssistantObject struct {
	value *AssistantObject
	isSet bool
}

func (v NullableAssistantObject) Get() *AssistantObject {
	return v.value
}

func (v *NullableAssistantObject) Set(val *AssistantObject) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantObject) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantObject(val *AssistantObject) *NullableAssistantObject {
	return &NullableAssistantObject{value: val, isSet: true}
}

func (v NullableAssistantObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


