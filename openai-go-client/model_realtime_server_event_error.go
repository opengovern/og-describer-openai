/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RealtimeServerEventError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeServerEventError{}

// RealtimeServerEventError Returned when an error occurs, which could be a client problem or a server problem. Most errors are recoverable and the session will stay open, we recommend to implementors to monitor and log error messages by default.
type RealtimeServerEventError struct {
	// The unique ID of the server event.
	EventId string `json:"event_id"`
	// The event type, must be \"error\".
	Type string `json:"type"`
	Error RealtimeServerEventErrorError `json:"error"`
}

type _RealtimeServerEventError RealtimeServerEventError

// NewRealtimeServerEventError instantiates a new RealtimeServerEventError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeServerEventError(eventId string, type_ string, error_ RealtimeServerEventErrorError) *RealtimeServerEventError {
	this := RealtimeServerEventError{}
	this.EventId = eventId
	this.Type = type_
	this.Error = error_
	return &this
}

// NewRealtimeServerEventErrorWithDefaults instantiates a new RealtimeServerEventError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeServerEventErrorWithDefaults() *RealtimeServerEventError {
	this := RealtimeServerEventError{}
	return &this
}

// GetEventId returns the EventId field value
func (o *RealtimeServerEventError) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventError) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *RealtimeServerEventError) SetEventId(v string) {
	o.EventId = v
}

// GetType returns the Type field value
func (o *RealtimeServerEventError) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventError) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RealtimeServerEventError) SetType(v string) {
	o.Type = v
}

// GetError returns the Error field value
func (o *RealtimeServerEventError) GetError() RealtimeServerEventErrorError {
	if o == nil {
		var ret RealtimeServerEventErrorError
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventError) GetErrorOk() (*RealtimeServerEventErrorError, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *RealtimeServerEventError) SetError(v RealtimeServerEventErrorError) {
	o.Error = v
}

func (o RealtimeServerEventError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeServerEventError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_id"] = o.EventId
	toSerialize["type"] = o.Type
	toSerialize["error"] = o.Error
	return toSerialize, nil
}

func (o *RealtimeServerEventError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_id",
		"type",
		"error",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRealtimeServerEventError := _RealtimeServerEventError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRealtimeServerEventError)

	if err != nil {
		return err
	}

	*o = RealtimeServerEventError(varRealtimeServerEventError)

	return err
}

type NullableRealtimeServerEventError struct {
	value *RealtimeServerEventError
	isSet bool
}

func (v NullableRealtimeServerEventError) Get() *RealtimeServerEventError {
	return v.value
}

func (v *NullableRealtimeServerEventError) Set(val *RealtimeServerEventError) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeServerEventError) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeServerEventError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeServerEventError(val *RealtimeServerEventError) *NullableRealtimeServerEventError {
	return &NullableRealtimeServerEventError{value: val, isSet: true}
}

func (v NullableRealtimeServerEventError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeServerEventError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


