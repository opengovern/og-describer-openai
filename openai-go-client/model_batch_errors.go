/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BatchErrors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchErrors{}

// BatchErrors struct for BatchErrors
type BatchErrors struct {
	// The object type, which is always `list`.
	Object *string `json:"object,omitempty"`
	Data []BatchErrorsDataInner `json:"data,omitempty"`
}

// NewBatchErrors instantiates a new BatchErrors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchErrors() *BatchErrors {
	this := BatchErrors{}
	return &this
}

// NewBatchErrorsWithDefaults instantiates a new BatchErrors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchErrorsWithDefaults() *BatchErrors {
	this := BatchErrors{}
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *BatchErrors) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchErrors) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *BatchErrors) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *BatchErrors) SetObject(v string) {
	o.Object = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *BatchErrors) GetData() []BatchErrorsDataInner {
	if o == nil || IsNil(o.Data) {
		var ret []BatchErrorsDataInner
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchErrors) GetDataOk() ([]BatchErrorsDataInner, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *BatchErrors) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []BatchErrorsDataInner and assigns it to the Data field.
func (o *BatchErrors) SetData(v []BatchErrorsDataInner) {
	o.Data = v
}

func (o BatchErrors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchErrors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableBatchErrors struct {
	value *BatchErrors
	isSet bool
}

func (v NullableBatchErrors) Get() *BatchErrors {
	return v.value
}

func (v *NullableBatchErrors) Set(val *BatchErrors) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchErrors) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchErrors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchErrors(val *BatchErrors) *NullableBatchErrors {
	return &NullableBatchErrors{value: val, isSet: true}
}

func (v NullableBatchErrors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchErrors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


