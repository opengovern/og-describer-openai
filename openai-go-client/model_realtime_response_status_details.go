/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RealtimeResponseStatusDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeResponseStatusDetails{}

// RealtimeResponseStatusDetails Additional details about the status.
type RealtimeResponseStatusDetails struct {
	// The type of error that caused the response to fail, corresponding with the `status` field (`cancelled`, `incomplete`, `failed`).
	Type *string `json:"type,omitempty"`
	// The reason the Response did not complete. For a `cancelled` Response, one of `turn_detected` (the server VAD detected a new start of speech) or `client_cancelled` (the client sent a cancel event). For an `incomplete` Response, one of `max_output_tokens` or `content_filter` (the server-side safety filter activated and cut off the response).
	Reason *string `json:"reason,omitempty"`
	Error *RealtimeResponseStatusDetailsError `json:"error,omitempty"`
}

// NewRealtimeResponseStatusDetails instantiates a new RealtimeResponseStatusDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeResponseStatusDetails() *RealtimeResponseStatusDetails {
	this := RealtimeResponseStatusDetails{}
	return &this
}

// NewRealtimeResponseStatusDetailsWithDefaults instantiates a new RealtimeResponseStatusDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeResponseStatusDetailsWithDefaults() *RealtimeResponseStatusDetails {
	this := RealtimeResponseStatusDetails{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RealtimeResponseStatusDetails) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponseStatusDetails) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RealtimeResponseStatusDetails) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RealtimeResponseStatusDetails) SetType(v string) {
	o.Type = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *RealtimeResponseStatusDetails) GetReason() string {
	if o == nil || IsNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponseStatusDetails) GetReasonOk() (*string, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *RealtimeResponseStatusDetails) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *RealtimeResponseStatusDetails) SetReason(v string) {
	o.Reason = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *RealtimeResponseStatusDetails) GetError() RealtimeResponseStatusDetailsError {
	if o == nil || IsNil(o.Error) {
		var ret RealtimeResponseStatusDetailsError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeResponseStatusDetails) GetErrorOk() (*RealtimeResponseStatusDetailsError, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *RealtimeResponseStatusDetails) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given RealtimeResponseStatusDetailsError and assigns it to the Error field.
func (o *RealtimeResponseStatusDetails) SetError(v RealtimeResponseStatusDetailsError) {
	o.Error = &v
}

func (o RealtimeResponseStatusDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeResponseStatusDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableRealtimeResponseStatusDetails struct {
	value *RealtimeResponseStatusDetails
	isSet bool
}

func (v NullableRealtimeResponseStatusDetails) Get() *RealtimeResponseStatusDetails {
	return v.value
}

func (v *NullableRealtimeResponseStatusDetails) Set(val *RealtimeResponseStatusDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeResponseStatusDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeResponseStatusDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeResponseStatusDetails(val *RealtimeResponseStatusDetails) *NullableRealtimeResponseStatusDetails {
	return &NullableRealtimeResponseStatusDetails{value: val, isSet: true}
}

func (v NullableRealtimeResponseStatusDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeResponseStatusDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


