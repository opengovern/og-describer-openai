/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuditLogInviteSent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogInviteSent{}

// AuditLogInviteSent The details for events with this `type`.
type AuditLogInviteSent struct {
	// The ID of the invite.
	Id *string `json:"id,omitempty"`
	Data *AuditLogInviteSentData `json:"data,omitempty"`
}

// NewAuditLogInviteSent instantiates a new AuditLogInviteSent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogInviteSent() *AuditLogInviteSent {
	this := AuditLogInviteSent{}
	return &this
}

// NewAuditLogInviteSentWithDefaults instantiates a new AuditLogInviteSent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogInviteSentWithDefaults() *AuditLogInviteSent {
	this := AuditLogInviteSent{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuditLogInviteSent) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogInviteSent) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuditLogInviteSent) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuditLogInviteSent) SetId(v string) {
	o.Id = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *AuditLogInviteSent) GetData() AuditLogInviteSentData {
	if o == nil || IsNil(o.Data) {
		var ret AuditLogInviteSentData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogInviteSent) GetDataOk() (*AuditLogInviteSentData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *AuditLogInviteSent) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given AuditLogInviteSentData and assigns it to the Data field.
func (o *AuditLogInviteSent) SetData(v AuditLogInviteSentData) {
	o.Data = &v
}

func (o AuditLogInviteSent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogInviteSent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableAuditLogInviteSent struct {
	value *AuditLogInviteSent
	isSet bool
}

func (v NullableAuditLogInviteSent) Get() *AuditLogInviteSent {
	return v.value
}

func (v *NullableAuditLogInviteSent) Set(val *AuditLogInviteSent) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogInviteSent) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogInviteSent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogInviteSent(val *AuditLogInviteSent) *NullableAuditLogInviteSent {
	return &NullableAuditLogInviteSent{value: val, isSet: true}
}

func (v NullableAuditLogInviteSent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogInviteSent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


