/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AuditLogActorSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogActorSession{}

// AuditLogActorSession The session in which the audit logged action was performed.
type AuditLogActorSession struct {
	User *AuditLogActorUser `json:"user,omitempty"`
	// The IP address from which the action was performed.
	IpAddress *string `json:"ip_address,omitempty"`
}

// NewAuditLogActorSession instantiates a new AuditLogActorSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogActorSession() *AuditLogActorSession {
	this := AuditLogActorSession{}
	return &this
}

// NewAuditLogActorSessionWithDefaults instantiates a new AuditLogActorSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogActorSessionWithDefaults() *AuditLogActorSession {
	this := AuditLogActorSession{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AuditLogActorSession) GetUser() AuditLogActorUser {
	if o == nil || IsNil(o.User) {
		var ret AuditLogActorUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogActorSession) GetUserOk() (*AuditLogActorUser, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AuditLogActorSession) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given AuditLogActorUser and assigns it to the User field.
func (o *AuditLogActorSession) SetUser(v AuditLogActorUser) {
	o.User = &v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *AuditLogActorSession) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditLogActorSession) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *AuditLogActorSession) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *AuditLogActorSession) SetIpAddress(v string) {
	o.IpAddress = &v
}

func (o AuditLogActorSession) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogActorSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.IpAddress) {
		toSerialize["ip_address"] = o.IpAddress
	}
	return toSerialize, nil
}

type NullableAuditLogActorSession struct {
	value *AuditLogActorSession
	isSet bool
}

func (v NullableAuditLogActorSession) Get() *AuditLogActorSession {
	return v.value
}

func (v *NullableAuditLogActorSession) Set(val *AuditLogActorSession) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogActorSession) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogActorSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogActorSession(val *AuditLogActorSession) *NullableAuditLogActorSession {
	return &NullableAuditLogActorSession{value: val, isSet: true}
}

func (v NullableAuditLogActorSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogActorSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


