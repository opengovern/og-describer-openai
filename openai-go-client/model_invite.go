/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Invite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Invite{}

// Invite Represents an individual `invite` to the organization.
type Invite struct {
	// The object type, which is always `organization.invite`
	Object string `json:"object"`
	// The identifier, which can be referenced in API endpoints
	Id string `json:"id"`
	// The email address of the individual to whom the invite was sent
	Email string `json:"email"`
	// `owner` or `reader`
	Role string `json:"role"`
	// `accepted`,`expired`, or `pending`
	Status string `json:"status"`
	// The Unix timestamp (in seconds) of when the invite was sent.
	InvitedAt int32 `json:"invited_at"`
	// The Unix timestamp (in seconds) of when the invite expires.
	ExpiresAt int32 `json:"expires_at"`
	// The Unix timestamp (in seconds) of when the invite was accepted.
	AcceptedAt *int32 `json:"accepted_at,omitempty"`
}

type _Invite Invite

// NewInvite instantiates a new Invite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvite(object string, id string, email string, role string, status string, invitedAt int32, expiresAt int32) *Invite {
	this := Invite{}
	this.Object = object
	this.Id = id
	this.Email = email
	this.Role = role
	this.Status = status
	this.InvitedAt = invitedAt
	this.ExpiresAt = expiresAt
	return &this
}

// NewInviteWithDefaults instantiates a new Invite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteWithDefaults() *Invite {
	this := Invite{}
	return &this
}

// GetObject returns the Object field value
func (o *Invite) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Invite) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Invite) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *Invite) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Invite) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Invite) SetId(v string) {
	o.Id = v
}

// GetEmail returns the Email field value
func (o *Invite) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *Invite) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *Invite) SetEmail(v string) {
	o.Email = v
}

// GetRole returns the Role field value
func (o *Invite) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *Invite) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *Invite) SetRole(v string) {
	o.Role = v
}

// GetStatus returns the Status field value
func (o *Invite) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Invite) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Invite) SetStatus(v string) {
	o.Status = v
}

// GetInvitedAt returns the InvitedAt field value
func (o *Invite) GetInvitedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.InvitedAt
}

// GetInvitedAtOk returns a tuple with the InvitedAt field value
// and a boolean to check if the value has been set.
func (o *Invite) GetInvitedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InvitedAt, true
}

// SetInvitedAt sets field value
func (o *Invite) SetInvitedAt(v int32) {
	o.InvitedAt = v
}

// GetExpiresAt returns the ExpiresAt field value
func (o *Invite) GetExpiresAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value
// and a boolean to check if the value has been set.
func (o *Invite) GetExpiresAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExpiresAt, true
}

// SetExpiresAt sets field value
func (o *Invite) SetExpiresAt(v int32) {
	o.ExpiresAt = v
}

// GetAcceptedAt returns the AcceptedAt field value if set, zero value otherwise.
func (o *Invite) GetAcceptedAt() int32 {
	if o == nil || IsNil(o.AcceptedAt) {
		var ret int32
		return ret
	}
	return *o.AcceptedAt
}

// GetAcceptedAtOk returns a tuple with the AcceptedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Invite) GetAcceptedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.AcceptedAt) {
		return nil, false
	}
	return o.AcceptedAt, true
}

// HasAcceptedAt returns a boolean if a field has been set.
func (o *Invite) HasAcceptedAt() bool {
	if o != nil && !IsNil(o.AcceptedAt) {
		return true
	}

	return false
}

// SetAcceptedAt gets a reference to the given int32 and assigns it to the AcceptedAt field.
func (o *Invite) SetAcceptedAt(v int32) {
	o.AcceptedAt = &v
}

func (o Invite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Invite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["id"] = o.Id
	toSerialize["email"] = o.Email
	toSerialize["role"] = o.Role
	toSerialize["status"] = o.Status
	toSerialize["invited_at"] = o.InvitedAt
	toSerialize["expires_at"] = o.ExpiresAt
	if !IsNil(o.AcceptedAt) {
		toSerialize["accepted_at"] = o.AcceptedAt
	}
	return toSerialize, nil
}

func (o *Invite) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"id",
		"email",
		"role",
		"status",
		"invited_at",
		"expires_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInvite := _Invite{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInvite)

	if err != nil {
		return err
	}

	*o = Invite(varInvite)

	return err
}

type NullableInvite struct {
	value *Invite
	isSet bool
}

func (v NullableInvite) Get() *Invite {
	return v.value
}

func (v *NullableInvite) Set(val *Invite) {
	v.value = val
	v.isSet = true
}

func (v NullableInvite) IsSet() bool {
	return v.isSet
}

func (v *NullableInvite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvite(val *Invite) *NullableInvite {
	return &NullableInvite{value: val, isSet: true}
}

func (v NullableInvite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


