/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AuditLogEventType The event type.
type AuditLogEventType string

// List of AuditLogEventType
const (
	API_KEY_CREATED AuditLogEventType = "api_key.created"
	API_KEY_UPDATED AuditLogEventType = "api_key.updated"
	API_KEY_DELETED AuditLogEventType = "api_key.deleted"
	INVITE_SENT AuditLogEventType = "invite.sent"
	INVITE_ACCEPTED AuditLogEventType = "invite.accepted"
	INVITE_DELETED AuditLogEventType = "invite.deleted"
	LOGIN_SUCCEEDED AuditLogEventType = "login.succeeded"
	LOGIN_FAILED AuditLogEventType = "login.failed"
	LOGOUT_SUCCEEDED AuditLogEventType = "logout.succeeded"
	LOGOUT_FAILED AuditLogEventType = "logout.failed"
	ORGANIZATION_UPDATED AuditLogEventType = "organization.updated"
	PROJECT_CREATED AuditLogEventType = "project.created"
	PROJECT_UPDATED AuditLogEventType = "project.updated"
	PROJECT_ARCHIVED AuditLogEventType = "project.archived"
	SERVICE_ACCOUNT_CREATED AuditLogEventType = "service_account.created"
	SERVICE_ACCOUNT_UPDATED AuditLogEventType = "service_account.updated"
	SERVICE_ACCOUNT_DELETED AuditLogEventType = "service_account.deleted"
	RATE_LIMIT_UPDATED AuditLogEventType = "rate_limit.updated"
	RATE_LIMIT_DELETED AuditLogEventType = "rate_limit.deleted"
	USER_ADDED AuditLogEventType = "user.added"
	USER_UPDATED AuditLogEventType = "user.updated"
	USER_DELETED AuditLogEventType = "user.deleted"
)

// All allowed values of AuditLogEventType enum
var AllowedAuditLogEventTypeEnumValues = []AuditLogEventType{
	"api_key.created",
	"api_key.updated",
	"api_key.deleted",
	"invite.sent",
	"invite.accepted",
	"invite.deleted",
	"login.succeeded",
	"login.failed",
	"logout.succeeded",
	"logout.failed",
	"organization.updated",
	"project.created",
	"project.updated",
	"project.archived",
	"service_account.created",
	"service_account.updated",
	"service_account.deleted",
	"rate_limit.updated",
	"rate_limit.deleted",
	"user.added",
	"user.updated",
	"user.deleted",
}

func (v *AuditLogEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AuditLogEventType(value)
	for _, existing := range AllowedAuditLogEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AuditLogEventType", value)
}

// NewAuditLogEventTypeFromValue returns a pointer to a valid AuditLogEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAuditLogEventTypeFromValue(v string) (*AuditLogEventType, error) {
	ev := AuditLogEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AuditLogEventType: valid values are %v", v, AllowedAuditLogEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AuditLogEventType) IsValid() bool {
	for _, existing := range AllowedAuditLogEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AuditLogEventType value
func (v AuditLogEventType) Ptr() *AuditLogEventType {
	return &v
}

type NullableAuditLogEventType struct {
	value *AuditLogEventType
	isSet bool
}

func (v NullableAuditLogEventType) Get() *AuditLogEventType {
	return v.value
}

func (v *NullableAuditLogEventType) Set(val *AuditLogEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogEventType(val *AuditLogEventType) *NullableAuditLogEventType {
	return &NullableAuditLogEventType{value: val, isSet: true}
}

func (v NullableAuditLogEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

