/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RealtimeServerEventResponseCreated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeServerEventResponseCreated{}

// RealtimeServerEventResponseCreated Returned when a new Response is created. The first event of response creation, where the response is in an initial state of `in_progress`.
type RealtimeServerEventResponseCreated struct {
	// The unique ID of the server event.
	EventId string `json:"event_id"`
	// The event type, must be `response.created`.
	Type string `json:"type"`
	Response RealtimeResponse `json:"response"`
}

type _RealtimeServerEventResponseCreated RealtimeServerEventResponseCreated

// NewRealtimeServerEventResponseCreated instantiates a new RealtimeServerEventResponseCreated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeServerEventResponseCreated(eventId string, type_ string, response RealtimeResponse) *RealtimeServerEventResponseCreated {
	this := RealtimeServerEventResponseCreated{}
	this.EventId = eventId
	this.Type = type_
	this.Response = response
	return &this
}

// NewRealtimeServerEventResponseCreatedWithDefaults instantiates a new RealtimeServerEventResponseCreated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeServerEventResponseCreatedWithDefaults() *RealtimeServerEventResponseCreated {
	this := RealtimeServerEventResponseCreated{}
	return &this
}

// GetEventId returns the EventId field value
func (o *RealtimeServerEventResponseCreated) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventResponseCreated) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *RealtimeServerEventResponseCreated) SetEventId(v string) {
	o.EventId = v
}

// GetType returns the Type field value
func (o *RealtimeServerEventResponseCreated) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventResponseCreated) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RealtimeServerEventResponseCreated) SetType(v string) {
	o.Type = v
}

// GetResponse returns the Response field value
func (o *RealtimeServerEventResponseCreated) GetResponse() RealtimeResponse {
	if o == nil {
		var ret RealtimeResponse
		return ret
	}

	return o.Response
}

// GetResponseOk returns a tuple with the Response field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventResponseCreated) GetResponseOk() (*RealtimeResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Response, true
}

// SetResponse sets field value
func (o *RealtimeServerEventResponseCreated) SetResponse(v RealtimeResponse) {
	o.Response = v
}

func (o RealtimeServerEventResponseCreated) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeServerEventResponseCreated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_id"] = o.EventId
	toSerialize["type"] = o.Type
	toSerialize["response"] = o.Response
	return toSerialize, nil
}

func (o *RealtimeServerEventResponseCreated) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_id",
		"type",
		"response",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRealtimeServerEventResponseCreated := _RealtimeServerEventResponseCreated{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRealtimeServerEventResponseCreated)

	if err != nil {
		return err
	}

	*o = RealtimeServerEventResponseCreated(varRealtimeServerEventResponseCreated)

	return err
}

type NullableRealtimeServerEventResponseCreated struct {
	value *RealtimeServerEventResponseCreated
	isSet bool
}

func (v NullableRealtimeServerEventResponseCreated) Get() *RealtimeServerEventResponseCreated {
	return v.value
}

func (v *NullableRealtimeServerEventResponseCreated) Set(val *RealtimeServerEventResponseCreated) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeServerEventResponseCreated) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeServerEventResponseCreated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeServerEventResponseCreated(val *RealtimeServerEventResponseCreated) *NullableRealtimeServerEventResponseCreated {
	return &NullableRealtimeServerEventResponseCreated{value: val, isSet: true}
}

func (v NullableRealtimeServerEventResponseCreated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeServerEventResponseCreated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


