/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RealtimeServerEventSessionCreated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeServerEventSessionCreated{}

// RealtimeServerEventSessionCreated Returned when a Session is created. Emitted automatically when a new connection is established as the first server event. This event will contain the default Session configuration.
type RealtimeServerEventSessionCreated struct {
	// The unique ID of the server event.
	EventId string `json:"event_id"`
	// The event type, must be `session.created`.
	Type string `json:"type"`
	Session RealtimeSession `json:"session"`
}

type _RealtimeServerEventSessionCreated RealtimeServerEventSessionCreated

// NewRealtimeServerEventSessionCreated instantiates a new RealtimeServerEventSessionCreated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeServerEventSessionCreated(eventId string, type_ string, session RealtimeSession) *RealtimeServerEventSessionCreated {
	this := RealtimeServerEventSessionCreated{}
	this.EventId = eventId
	this.Type = type_
	this.Session = session
	return &this
}

// NewRealtimeServerEventSessionCreatedWithDefaults instantiates a new RealtimeServerEventSessionCreated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeServerEventSessionCreatedWithDefaults() *RealtimeServerEventSessionCreated {
	this := RealtimeServerEventSessionCreated{}
	return &this
}

// GetEventId returns the EventId field value
func (o *RealtimeServerEventSessionCreated) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventSessionCreated) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *RealtimeServerEventSessionCreated) SetEventId(v string) {
	o.EventId = v
}

// GetType returns the Type field value
func (o *RealtimeServerEventSessionCreated) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventSessionCreated) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RealtimeServerEventSessionCreated) SetType(v string) {
	o.Type = v
}

// GetSession returns the Session field value
func (o *RealtimeServerEventSessionCreated) GetSession() RealtimeSession {
	if o == nil {
		var ret RealtimeSession
		return ret
	}

	return o.Session
}

// GetSessionOk returns a tuple with the Session field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventSessionCreated) GetSessionOk() (*RealtimeSession, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Session, true
}

// SetSession sets field value
func (o *RealtimeServerEventSessionCreated) SetSession(v RealtimeSession) {
	o.Session = v
}

func (o RealtimeServerEventSessionCreated) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeServerEventSessionCreated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_id"] = o.EventId
	toSerialize["type"] = o.Type
	toSerialize["session"] = o.Session
	return toSerialize, nil
}

func (o *RealtimeServerEventSessionCreated) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_id",
		"type",
		"session",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRealtimeServerEventSessionCreated := _RealtimeServerEventSessionCreated{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRealtimeServerEventSessionCreated)

	if err != nil {
		return err
	}

	*o = RealtimeServerEventSessionCreated(varRealtimeServerEventSessionCreated)

	return err
}

type NullableRealtimeServerEventSessionCreated struct {
	value *RealtimeServerEventSessionCreated
	isSet bool
}

func (v NullableRealtimeServerEventSessionCreated) Get() *RealtimeServerEventSessionCreated {
	return v.value
}

func (v *NullableRealtimeServerEventSessionCreated) Set(val *RealtimeServerEventSessionCreated) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeServerEventSessionCreated) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeServerEventSessionCreated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeServerEventSessionCreated(val *RealtimeServerEventSessionCreated) *NullableRealtimeServerEventSessionCreated {
	return &NullableRealtimeServerEventSessionCreated{value: val, isSet: true}
}

func (v NullableRealtimeServerEventSessionCreated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeServerEventSessionCreated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


