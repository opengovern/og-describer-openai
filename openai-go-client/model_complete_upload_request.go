/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompleteUploadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompleteUploadRequest{}

// CompleteUploadRequest struct for CompleteUploadRequest
type CompleteUploadRequest struct {
	// The ordered list of Part IDs. 
	PartIds []string `json:"part_ids"`
	// The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect. 
	Md5 *string `json:"md5,omitempty"`
}

type _CompleteUploadRequest CompleteUploadRequest

// NewCompleteUploadRequest instantiates a new CompleteUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompleteUploadRequest(partIds []string) *CompleteUploadRequest {
	this := CompleteUploadRequest{}
	this.PartIds = partIds
	return &this
}

// NewCompleteUploadRequestWithDefaults instantiates a new CompleteUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompleteUploadRequestWithDefaults() *CompleteUploadRequest {
	this := CompleteUploadRequest{}
	return &this
}

// GetPartIds returns the PartIds field value
func (o *CompleteUploadRequest) GetPartIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.PartIds
}

// GetPartIdsOk returns a tuple with the PartIds field value
// and a boolean to check if the value has been set.
func (o *CompleteUploadRequest) GetPartIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PartIds, true
}

// SetPartIds sets field value
func (o *CompleteUploadRequest) SetPartIds(v []string) {
	o.PartIds = v
}

// GetMd5 returns the Md5 field value if set, zero value otherwise.
func (o *CompleteUploadRequest) GetMd5() string {
	if o == nil || IsNil(o.Md5) {
		var ret string
		return ret
	}
	return *o.Md5
}

// GetMd5Ok returns a tuple with the Md5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompleteUploadRequest) GetMd5Ok() (*string, bool) {
	if o == nil || IsNil(o.Md5) {
		return nil, false
	}
	return o.Md5, true
}

// HasMd5 returns a boolean if a field has been set.
func (o *CompleteUploadRequest) HasMd5() bool {
	if o != nil && !IsNil(o.Md5) {
		return true
	}

	return false
}

// SetMd5 gets a reference to the given string and assigns it to the Md5 field.
func (o *CompleteUploadRequest) SetMd5(v string) {
	o.Md5 = &v
}

func (o CompleteUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompleteUploadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["part_ids"] = o.PartIds
	if !IsNil(o.Md5) {
		toSerialize["md5"] = o.Md5
	}
	return toSerialize, nil
}

func (o *CompleteUploadRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"part_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompleteUploadRequest := _CompleteUploadRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompleteUploadRequest)

	if err != nil {
		return err
	}

	*o = CompleteUploadRequest(varCompleteUploadRequest)

	return err
}

type NullableCompleteUploadRequest struct {
	value *CompleteUploadRequest
	isSet bool
}

func (v NullableCompleteUploadRequest) Get() *CompleteUploadRequest {
	return v.value
}

func (v *NullableCompleteUploadRequest) Set(val *CompleteUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCompleteUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCompleteUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompleteUploadRequest(val *CompleteUploadRequest) *NullableCompleteUploadRequest {
	return &NullableCompleteUploadRequest{value: val, isSet: true}
}

func (v NullableCompleteUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompleteUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


