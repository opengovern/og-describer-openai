/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy - The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
type CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy struct {
	AutoChunkingStrategy *AutoChunkingStrategy
	StaticChunkingStrategy *StaticChunkingStrategy
}

// AutoChunkingStrategyAsCreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy is a convenience function that returns AutoChunkingStrategy wrapped in CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy
func AutoChunkingStrategyAsCreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy(v *AutoChunkingStrategy) CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy {
	return CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy{
		AutoChunkingStrategy: v,
	}
}

// StaticChunkingStrategyAsCreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy is a convenience function that returns StaticChunkingStrategy wrapped in CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy
func StaticChunkingStrategyAsCreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy(v *StaticChunkingStrategy) CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy {
	return CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy{
		StaticChunkingStrategy: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AutoChunkingStrategy
	err = newStrictDecoder(data).Decode(&dst.AutoChunkingStrategy)
	if err == nil {
		jsonAutoChunkingStrategy, _ := json.Marshal(dst.AutoChunkingStrategy)
		if string(jsonAutoChunkingStrategy) == "{}" { // empty struct
			dst.AutoChunkingStrategy = nil
		} else {
			if err = validator.Validate(dst.AutoChunkingStrategy); err != nil {
				dst.AutoChunkingStrategy = nil
			} else {
				match++
			}
		}
	} else {
		dst.AutoChunkingStrategy = nil
	}

	// try to unmarshal data into StaticChunkingStrategy
	err = newStrictDecoder(data).Decode(&dst.StaticChunkingStrategy)
	if err == nil {
		jsonStaticChunkingStrategy, _ := json.Marshal(dst.StaticChunkingStrategy)
		if string(jsonStaticChunkingStrategy) == "{}" { // empty struct
			dst.StaticChunkingStrategy = nil
		} else {
			if err = validator.Validate(dst.StaticChunkingStrategy); err != nil {
				dst.StaticChunkingStrategy = nil
			} else {
				match++
			}
		}
	} else {
		dst.StaticChunkingStrategy = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AutoChunkingStrategy = nil
		dst.StaticChunkingStrategy = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy) MarshalJSON() ([]byte, error) {
	if src.AutoChunkingStrategy != nil {
		return json.Marshal(&src.AutoChunkingStrategy)
	}

	if src.StaticChunkingStrategy != nil {
		return json.Marshal(&src.StaticChunkingStrategy)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AutoChunkingStrategy != nil {
		return obj.AutoChunkingStrategy
	}

	if obj.StaticChunkingStrategy != nil {
		return obj.StaticChunkingStrategy
	}

	// all schemas are nil
	return nil
}

type NullableCreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy struct {
	value *CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy
	isSet bool
}

func (v NullableCreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy) Get() *CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy {
	return v.value
}

func (v *NullableCreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy) Set(val *CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy(val *CreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy) *NullableCreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy {
	return &NullableCreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy{value: val, isSet: true}
}

func (v NullableCreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAssistantRequestToolResourcesFileSearchVectorStoresInnerChunkingStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


