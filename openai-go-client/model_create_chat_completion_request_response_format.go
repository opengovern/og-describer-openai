/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// CreateChatCompletionRequestResponseFormat - An object specifying the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4o mini](/docs/models#gpt-4o-mini), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.  Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length. 
type CreateChatCompletionRequestResponseFormat struct {
	ResponseFormatJsonObject *ResponseFormatJsonObject
	ResponseFormatJsonSchema *ResponseFormatJsonSchema
	ResponseFormatText *ResponseFormatText
}

// ResponseFormatJsonObjectAsCreateChatCompletionRequestResponseFormat is a convenience function that returns ResponseFormatJsonObject wrapped in CreateChatCompletionRequestResponseFormat
func ResponseFormatJsonObjectAsCreateChatCompletionRequestResponseFormat(v *ResponseFormatJsonObject) CreateChatCompletionRequestResponseFormat {
	return CreateChatCompletionRequestResponseFormat{
		ResponseFormatJsonObject: v,
	}
}

// ResponseFormatJsonSchemaAsCreateChatCompletionRequestResponseFormat is a convenience function that returns ResponseFormatJsonSchema wrapped in CreateChatCompletionRequestResponseFormat
func ResponseFormatJsonSchemaAsCreateChatCompletionRequestResponseFormat(v *ResponseFormatJsonSchema) CreateChatCompletionRequestResponseFormat {
	return CreateChatCompletionRequestResponseFormat{
		ResponseFormatJsonSchema: v,
	}
}

// ResponseFormatTextAsCreateChatCompletionRequestResponseFormat is a convenience function that returns ResponseFormatText wrapped in CreateChatCompletionRequestResponseFormat
func ResponseFormatTextAsCreateChatCompletionRequestResponseFormat(v *ResponseFormatText) CreateChatCompletionRequestResponseFormat {
	return CreateChatCompletionRequestResponseFormat{
		ResponseFormatText: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateChatCompletionRequestResponseFormat) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ResponseFormatJsonObject
	err = newStrictDecoder(data).Decode(&dst.ResponseFormatJsonObject)
	if err == nil {
		jsonResponseFormatJsonObject, _ := json.Marshal(dst.ResponseFormatJsonObject)
		if string(jsonResponseFormatJsonObject) == "{}" { // empty struct
			dst.ResponseFormatJsonObject = nil
		} else {
			if err = validator.Validate(dst.ResponseFormatJsonObject); err != nil {
				dst.ResponseFormatJsonObject = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResponseFormatJsonObject = nil
	}

	// try to unmarshal data into ResponseFormatJsonSchema
	err = newStrictDecoder(data).Decode(&dst.ResponseFormatJsonSchema)
	if err == nil {
		jsonResponseFormatJsonSchema, _ := json.Marshal(dst.ResponseFormatJsonSchema)
		if string(jsonResponseFormatJsonSchema) == "{}" { // empty struct
			dst.ResponseFormatJsonSchema = nil
		} else {
			if err = validator.Validate(dst.ResponseFormatJsonSchema); err != nil {
				dst.ResponseFormatJsonSchema = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResponseFormatJsonSchema = nil
	}

	// try to unmarshal data into ResponseFormatText
	err = newStrictDecoder(data).Decode(&dst.ResponseFormatText)
	if err == nil {
		jsonResponseFormatText, _ := json.Marshal(dst.ResponseFormatText)
		if string(jsonResponseFormatText) == "{}" { // empty struct
			dst.ResponseFormatText = nil
		} else {
			if err = validator.Validate(dst.ResponseFormatText); err != nil {
				dst.ResponseFormatText = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResponseFormatText = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ResponseFormatJsonObject = nil
		dst.ResponseFormatJsonSchema = nil
		dst.ResponseFormatText = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CreateChatCompletionRequestResponseFormat)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CreateChatCompletionRequestResponseFormat)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateChatCompletionRequestResponseFormat) MarshalJSON() ([]byte, error) {
	if src.ResponseFormatJsonObject != nil {
		return json.Marshal(&src.ResponseFormatJsonObject)
	}

	if src.ResponseFormatJsonSchema != nil {
		return json.Marshal(&src.ResponseFormatJsonSchema)
	}

	if src.ResponseFormatText != nil {
		return json.Marshal(&src.ResponseFormatText)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateChatCompletionRequestResponseFormat) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ResponseFormatJsonObject != nil {
		return obj.ResponseFormatJsonObject
	}

	if obj.ResponseFormatJsonSchema != nil {
		return obj.ResponseFormatJsonSchema
	}

	if obj.ResponseFormatText != nil {
		return obj.ResponseFormatText
	}

	// all schemas are nil
	return nil
}

type NullableCreateChatCompletionRequestResponseFormat struct {
	value *CreateChatCompletionRequestResponseFormat
	isSet bool
}

func (v NullableCreateChatCompletionRequestResponseFormat) Get() *CreateChatCompletionRequestResponseFormat {
	return v.value
}

func (v *NullableCreateChatCompletionRequestResponseFormat) Set(val *CreateChatCompletionRequestResponseFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateChatCompletionRequestResponseFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateChatCompletionRequestResponseFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateChatCompletionRequestResponseFormat(val *CreateChatCompletionRequestResponseFormat) *NullableCreateChatCompletionRequestResponseFormat {
	return &NullableCreateChatCompletionRequestResponseFormat{value: val, isSet: true}
}

func (v NullableCreateChatCompletionRequestResponseFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateChatCompletionRequestResponseFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


