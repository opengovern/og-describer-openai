/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Batch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Batch{}

// Batch struct for Batch
type Batch struct {
	Id string `json:"id"`
	// The object type, which is always `batch`.
	Object string `json:"object"`
	// The OpenAI API endpoint used by the batch.
	Endpoint string `json:"endpoint"`
	Errors *BatchErrors `json:"errors,omitempty"`
	// The ID of the input file for the batch.
	InputFileId string `json:"input_file_id"`
	// The time frame within which the batch should be processed.
	CompletionWindow string `json:"completion_window"`
	// The current status of the batch.
	Status string `json:"status"`
	// The ID of the file containing the outputs of successfully executed requests.
	OutputFileId *string `json:"output_file_id,omitempty"`
	// The ID of the file containing the outputs of requests with errors.
	ErrorFileId *string `json:"error_file_id,omitempty"`
	// The Unix timestamp (in seconds) for when the batch was created.
	CreatedAt int32 `json:"created_at"`
	// The Unix timestamp (in seconds) for when the batch started processing.
	InProgressAt *int32 `json:"in_progress_at,omitempty"`
	// The Unix timestamp (in seconds) for when the batch will expire.
	ExpiresAt *int32 `json:"expires_at,omitempty"`
	// The Unix timestamp (in seconds) for when the batch started finalizing.
	FinalizingAt *int32 `json:"finalizing_at,omitempty"`
	// The Unix timestamp (in seconds) for when the batch was completed.
	CompletedAt *int32 `json:"completed_at,omitempty"`
	// The Unix timestamp (in seconds) for when the batch failed.
	FailedAt *int32 `json:"failed_at,omitempty"`
	// The Unix timestamp (in seconds) for when the batch expired.
	ExpiredAt *int32 `json:"expired_at,omitempty"`
	// The Unix timestamp (in seconds) for when the batch started cancelling.
	CancellingAt *int32 `json:"cancelling_at,omitempty"`
	// The Unix timestamp (in seconds) for when the batch was cancelled.
	CancelledAt *int32 `json:"cancelled_at,omitempty"`
	RequestCounts *BatchRequestCounts `json:"request_counts,omitempty"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long. 
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type _Batch Batch

// NewBatch instantiates a new Batch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatch(id string, object string, endpoint string, inputFileId string, completionWindow string, status string, createdAt int32) *Batch {
	this := Batch{}
	this.Id = id
	this.Object = object
	this.Endpoint = endpoint
	this.InputFileId = inputFileId
	this.CompletionWindow = completionWindow
	this.Status = status
	this.CreatedAt = createdAt
	return &this
}

// NewBatchWithDefaults instantiates a new Batch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchWithDefaults() *Batch {
	this := Batch{}
	return &this
}

// GetId returns the Id field value
func (o *Batch) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Batch) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Batch) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value
func (o *Batch) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *Batch) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *Batch) SetObject(v string) {
	o.Object = v
}

// GetEndpoint returns the Endpoint field value
func (o *Batch) GetEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
func (o *Batch) GetEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Endpoint, true
}

// SetEndpoint sets field value
func (o *Batch) SetEndpoint(v string) {
	o.Endpoint = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *Batch) GetErrors() BatchErrors {
	if o == nil || IsNil(o.Errors) {
		var ret BatchErrors
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetErrorsOk() (*BatchErrors, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *Batch) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given BatchErrors and assigns it to the Errors field.
func (o *Batch) SetErrors(v BatchErrors) {
	o.Errors = &v
}

// GetInputFileId returns the InputFileId field value
func (o *Batch) GetInputFileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InputFileId
}

// GetInputFileIdOk returns a tuple with the InputFileId field value
// and a boolean to check if the value has been set.
func (o *Batch) GetInputFileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InputFileId, true
}

// SetInputFileId sets field value
func (o *Batch) SetInputFileId(v string) {
	o.InputFileId = v
}

// GetCompletionWindow returns the CompletionWindow field value
func (o *Batch) GetCompletionWindow() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CompletionWindow
}

// GetCompletionWindowOk returns a tuple with the CompletionWindow field value
// and a boolean to check if the value has been set.
func (o *Batch) GetCompletionWindowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CompletionWindow, true
}

// SetCompletionWindow sets field value
func (o *Batch) SetCompletionWindow(v string) {
	o.CompletionWindow = v
}

// GetStatus returns the Status field value
func (o *Batch) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *Batch) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *Batch) SetStatus(v string) {
	o.Status = v
}

// GetOutputFileId returns the OutputFileId field value if set, zero value otherwise.
func (o *Batch) GetOutputFileId() string {
	if o == nil || IsNil(o.OutputFileId) {
		var ret string
		return ret
	}
	return *o.OutputFileId
}

// GetOutputFileIdOk returns a tuple with the OutputFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetOutputFileIdOk() (*string, bool) {
	if o == nil || IsNil(o.OutputFileId) {
		return nil, false
	}
	return o.OutputFileId, true
}

// HasOutputFileId returns a boolean if a field has been set.
func (o *Batch) HasOutputFileId() bool {
	if o != nil && !IsNil(o.OutputFileId) {
		return true
	}

	return false
}

// SetOutputFileId gets a reference to the given string and assigns it to the OutputFileId field.
func (o *Batch) SetOutputFileId(v string) {
	o.OutputFileId = &v
}

// GetErrorFileId returns the ErrorFileId field value if set, zero value otherwise.
func (o *Batch) GetErrorFileId() string {
	if o == nil || IsNil(o.ErrorFileId) {
		var ret string
		return ret
	}
	return *o.ErrorFileId
}

// GetErrorFileIdOk returns a tuple with the ErrorFileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetErrorFileIdOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorFileId) {
		return nil, false
	}
	return o.ErrorFileId, true
}

// HasErrorFileId returns a boolean if a field has been set.
func (o *Batch) HasErrorFileId() bool {
	if o != nil && !IsNil(o.ErrorFileId) {
		return true
	}

	return false
}

// SetErrorFileId gets a reference to the given string and assigns it to the ErrorFileId field.
func (o *Batch) SetErrorFileId(v string) {
	o.ErrorFileId = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Batch) GetCreatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Batch) GetCreatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Batch) SetCreatedAt(v int32) {
	o.CreatedAt = v
}

// GetInProgressAt returns the InProgressAt field value if set, zero value otherwise.
func (o *Batch) GetInProgressAt() int32 {
	if o == nil || IsNil(o.InProgressAt) {
		var ret int32
		return ret
	}
	return *o.InProgressAt
}

// GetInProgressAtOk returns a tuple with the InProgressAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetInProgressAtOk() (*int32, bool) {
	if o == nil || IsNil(o.InProgressAt) {
		return nil, false
	}
	return o.InProgressAt, true
}

// HasInProgressAt returns a boolean if a field has been set.
func (o *Batch) HasInProgressAt() bool {
	if o != nil && !IsNil(o.InProgressAt) {
		return true
	}

	return false
}

// SetInProgressAt gets a reference to the given int32 and assigns it to the InProgressAt field.
func (o *Batch) SetInProgressAt(v int32) {
	o.InProgressAt = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *Batch) GetExpiresAt() int32 {
	if o == nil || IsNil(o.ExpiresAt) {
		var ret int32
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetExpiresAtOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiresAt) {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *Batch) HasExpiresAt() bool {
	if o != nil && !IsNil(o.ExpiresAt) {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given int32 and assigns it to the ExpiresAt field.
func (o *Batch) SetExpiresAt(v int32) {
	o.ExpiresAt = &v
}

// GetFinalizingAt returns the FinalizingAt field value if set, zero value otherwise.
func (o *Batch) GetFinalizingAt() int32 {
	if o == nil || IsNil(o.FinalizingAt) {
		var ret int32
		return ret
	}
	return *o.FinalizingAt
}

// GetFinalizingAtOk returns a tuple with the FinalizingAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetFinalizingAtOk() (*int32, bool) {
	if o == nil || IsNil(o.FinalizingAt) {
		return nil, false
	}
	return o.FinalizingAt, true
}

// HasFinalizingAt returns a boolean if a field has been set.
func (o *Batch) HasFinalizingAt() bool {
	if o != nil && !IsNil(o.FinalizingAt) {
		return true
	}

	return false
}

// SetFinalizingAt gets a reference to the given int32 and assigns it to the FinalizingAt field.
func (o *Batch) SetFinalizingAt(v int32) {
	o.FinalizingAt = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise.
func (o *Batch) GetCompletedAt() int32 {
	if o == nil || IsNil(o.CompletedAt) {
		var ret int32
		return ret
	}
	return *o.CompletedAt
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetCompletedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.CompletedAt) {
		return nil, false
	}
	return o.CompletedAt, true
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *Batch) HasCompletedAt() bool {
	if o != nil && !IsNil(o.CompletedAt) {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given int32 and assigns it to the CompletedAt field.
func (o *Batch) SetCompletedAt(v int32) {
	o.CompletedAt = &v
}

// GetFailedAt returns the FailedAt field value if set, zero value otherwise.
func (o *Batch) GetFailedAt() int32 {
	if o == nil || IsNil(o.FailedAt) {
		var ret int32
		return ret
	}
	return *o.FailedAt
}

// GetFailedAtOk returns a tuple with the FailedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetFailedAtOk() (*int32, bool) {
	if o == nil || IsNil(o.FailedAt) {
		return nil, false
	}
	return o.FailedAt, true
}

// HasFailedAt returns a boolean if a field has been set.
func (o *Batch) HasFailedAt() bool {
	if o != nil && !IsNil(o.FailedAt) {
		return true
	}

	return false
}

// SetFailedAt gets a reference to the given int32 and assigns it to the FailedAt field.
func (o *Batch) SetFailedAt(v int32) {
	o.FailedAt = &v
}

// GetExpiredAt returns the ExpiredAt field value if set, zero value otherwise.
func (o *Batch) GetExpiredAt() int32 {
	if o == nil || IsNil(o.ExpiredAt) {
		var ret int32
		return ret
	}
	return *o.ExpiredAt
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetExpiredAtOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiredAt) {
		return nil, false
	}
	return o.ExpiredAt, true
}

// HasExpiredAt returns a boolean if a field has been set.
func (o *Batch) HasExpiredAt() bool {
	if o != nil && !IsNil(o.ExpiredAt) {
		return true
	}

	return false
}

// SetExpiredAt gets a reference to the given int32 and assigns it to the ExpiredAt field.
func (o *Batch) SetExpiredAt(v int32) {
	o.ExpiredAt = &v
}

// GetCancellingAt returns the CancellingAt field value if set, zero value otherwise.
func (o *Batch) GetCancellingAt() int32 {
	if o == nil || IsNil(o.CancellingAt) {
		var ret int32
		return ret
	}
	return *o.CancellingAt
}

// GetCancellingAtOk returns a tuple with the CancellingAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetCancellingAtOk() (*int32, bool) {
	if o == nil || IsNil(o.CancellingAt) {
		return nil, false
	}
	return o.CancellingAt, true
}

// HasCancellingAt returns a boolean if a field has been set.
func (o *Batch) HasCancellingAt() bool {
	if o != nil && !IsNil(o.CancellingAt) {
		return true
	}

	return false
}

// SetCancellingAt gets a reference to the given int32 and assigns it to the CancellingAt field.
func (o *Batch) SetCancellingAt(v int32) {
	o.CancellingAt = &v
}

// GetCancelledAt returns the CancelledAt field value if set, zero value otherwise.
func (o *Batch) GetCancelledAt() int32 {
	if o == nil || IsNil(o.CancelledAt) {
		var ret int32
		return ret
	}
	return *o.CancelledAt
}

// GetCancelledAtOk returns a tuple with the CancelledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetCancelledAtOk() (*int32, bool) {
	if o == nil || IsNil(o.CancelledAt) {
		return nil, false
	}
	return o.CancelledAt, true
}

// HasCancelledAt returns a boolean if a field has been set.
func (o *Batch) HasCancelledAt() bool {
	if o != nil && !IsNil(o.CancelledAt) {
		return true
	}

	return false
}

// SetCancelledAt gets a reference to the given int32 and assigns it to the CancelledAt field.
func (o *Batch) SetCancelledAt(v int32) {
	o.CancelledAt = &v
}

// GetRequestCounts returns the RequestCounts field value if set, zero value otherwise.
func (o *Batch) GetRequestCounts() BatchRequestCounts {
	if o == nil || IsNil(o.RequestCounts) {
		var ret BatchRequestCounts
		return ret
	}
	return *o.RequestCounts
}

// GetRequestCountsOk returns a tuple with the RequestCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Batch) GetRequestCountsOk() (*BatchRequestCounts, bool) {
	if o == nil || IsNil(o.RequestCounts) {
		return nil, false
	}
	return o.RequestCounts, true
}

// HasRequestCounts returns a boolean if a field has been set.
func (o *Batch) HasRequestCounts() bool {
	if o != nil && !IsNil(o.RequestCounts) {
		return true
	}

	return false
}

// SetRequestCounts gets a reference to the given BatchRequestCounts and assigns it to the RequestCounts field.
func (o *Batch) SetRequestCounts(v BatchRequestCounts) {
	o.RequestCounts = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Batch) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Batch) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Batch) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *Batch) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o Batch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Batch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["object"] = o.Object
	toSerialize["endpoint"] = o.Endpoint
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	toSerialize["input_file_id"] = o.InputFileId
	toSerialize["completion_window"] = o.CompletionWindow
	toSerialize["status"] = o.Status
	if !IsNil(o.OutputFileId) {
		toSerialize["output_file_id"] = o.OutputFileId
	}
	if !IsNil(o.ErrorFileId) {
		toSerialize["error_file_id"] = o.ErrorFileId
	}
	toSerialize["created_at"] = o.CreatedAt
	if !IsNil(o.InProgressAt) {
		toSerialize["in_progress_at"] = o.InProgressAt
	}
	if !IsNil(o.ExpiresAt) {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if !IsNil(o.FinalizingAt) {
		toSerialize["finalizing_at"] = o.FinalizingAt
	}
	if !IsNil(o.CompletedAt) {
		toSerialize["completed_at"] = o.CompletedAt
	}
	if !IsNil(o.FailedAt) {
		toSerialize["failed_at"] = o.FailedAt
	}
	if !IsNil(o.ExpiredAt) {
		toSerialize["expired_at"] = o.ExpiredAt
	}
	if !IsNil(o.CancellingAt) {
		toSerialize["cancelling_at"] = o.CancellingAt
	}
	if !IsNil(o.CancelledAt) {
		toSerialize["cancelled_at"] = o.CancelledAt
	}
	if !IsNil(o.RequestCounts) {
		toSerialize["request_counts"] = o.RequestCounts
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *Batch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"object",
		"endpoint",
		"input_file_id",
		"completion_window",
		"status",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatch := _Batch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBatch)

	if err != nil {
		return err
	}

	*o = Batch(varBatch)

	return err
}

type NullableBatch struct {
	value *Batch
	isSet bool
}

func (v NullableBatch) Get() *Batch {
	return v.value
}

func (v *NullableBatch) Set(val *Batch) {
	v.value = val
	v.isSet = true
}

func (v NullableBatch) IsSet() bool {
	return v.isSet
}

func (v *NullableBatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatch(val *Batch) *NullableBatch {
	return &NullableBatch{value: val, isSet: true}
}

func (v NullableBatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


