/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RealtimeServerEventConversationItemTruncated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeServerEventConversationItemTruncated{}

// RealtimeServerEventConversationItemTruncated Returned when an earlier assistant audio message item is truncated by the client with a `conversation.item.truncate` event. This event is used to synchronize the server's understanding of the audio with the client's playback. This action will truncate the audio and remove the server-side text transcript to ensure there is no text in the context that hasn't been heard by the user.
type RealtimeServerEventConversationItemTruncated struct {
	// The unique ID of the server event.
	EventId string `json:"event_id"`
	// The event type, must be `conversation.item.truncated`.
	Type string `json:"type"`
	// The ID of the assistant message item that was truncated.
	ItemId string `json:"item_id"`
	// The index of the content part that was truncated.
	ContentIndex int32 `json:"content_index"`
	// The duration up to which the audio was truncated, in milliseconds.
	AudioEndMs int32 `json:"audio_end_ms"`
}

type _RealtimeServerEventConversationItemTruncated RealtimeServerEventConversationItemTruncated

// NewRealtimeServerEventConversationItemTruncated instantiates a new RealtimeServerEventConversationItemTruncated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeServerEventConversationItemTruncated(eventId string, type_ string, itemId string, contentIndex int32, audioEndMs int32) *RealtimeServerEventConversationItemTruncated {
	this := RealtimeServerEventConversationItemTruncated{}
	this.EventId = eventId
	this.Type = type_
	this.ItemId = itemId
	this.ContentIndex = contentIndex
	this.AudioEndMs = audioEndMs
	return &this
}

// NewRealtimeServerEventConversationItemTruncatedWithDefaults instantiates a new RealtimeServerEventConversationItemTruncated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeServerEventConversationItemTruncatedWithDefaults() *RealtimeServerEventConversationItemTruncated {
	this := RealtimeServerEventConversationItemTruncated{}
	return &this
}

// GetEventId returns the EventId field value
func (o *RealtimeServerEventConversationItemTruncated) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventConversationItemTruncated) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *RealtimeServerEventConversationItemTruncated) SetEventId(v string) {
	o.EventId = v
}

// GetType returns the Type field value
func (o *RealtimeServerEventConversationItemTruncated) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventConversationItemTruncated) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RealtimeServerEventConversationItemTruncated) SetType(v string) {
	o.Type = v
}

// GetItemId returns the ItemId field value
func (o *RealtimeServerEventConversationItemTruncated) GetItemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventConversationItemTruncated) GetItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemId, true
}

// SetItemId sets field value
func (o *RealtimeServerEventConversationItemTruncated) SetItemId(v string) {
	o.ItemId = v
}

// GetContentIndex returns the ContentIndex field value
func (o *RealtimeServerEventConversationItemTruncated) GetContentIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ContentIndex
}

// GetContentIndexOk returns a tuple with the ContentIndex field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventConversationItemTruncated) GetContentIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ContentIndex, true
}

// SetContentIndex sets field value
func (o *RealtimeServerEventConversationItemTruncated) SetContentIndex(v int32) {
	o.ContentIndex = v
}

// GetAudioEndMs returns the AudioEndMs field value
func (o *RealtimeServerEventConversationItemTruncated) GetAudioEndMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AudioEndMs
}

// GetAudioEndMsOk returns a tuple with the AudioEndMs field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventConversationItemTruncated) GetAudioEndMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AudioEndMs, true
}

// SetAudioEndMs sets field value
func (o *RealtimeServerEventConversationItemTruncated) SetAudioEndMs(v int32) {
	o.AudioEndMs = v
}

func (o RealtimeServerEventConversationItemTruncated) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeServerEventConversationItemTruncated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_id"] = o.EventId
	toSerialize["type"] = o.Type
	toSerialize["item_id"] = o.ItemId
	toSerialize["content_index"] = o.ContentIndex
	toSerialize["audio_end_ms"] = o.AudioEndMs
	return toSerialize, nil
}

func (o *RealtimeServerEventConversationItemTruncated) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_id",
		"type",
		"item_id",
		"content_index",
		"audio_end_ms",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRealtimeServerEventConversationItemTruncated := _RealtimeServerEventConversationItemTruncated{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRealtimeServerEventConversationItemTruncated)

	if err != nil {
		return err
	}

	*o = RealtimeServerEventConversationItemTruncated(varRealtimeServerEventConversationItemTruncated)

	return err
}

type NullableRealtimeServerEventConversationItemTruncated struct {
	value *RealtimeServerEventConversationItemTruncated
	isSet bool
}

func (v NullableRealtimeServerEventConversationItemTruncated) Get() *RealtimeServerEventConversationItemTruncated {
	return v.value
}

func (v *NullableRealtimeServerEventConversationItemTruncated) Set(val *RealtimeServerEventConversationItemTruncated) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeServerEventConversationItemTruncated) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeServerEventConversationItemTruncated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeServerEventConversationItemTruncated(val *RealtimeServerEventConversationItemTruncated) *NullableRealtimeServerEventConversationItemTruncated {
	return &NullableRealtimeServerEventConversationItemTruncated{value: val, isSet: true}
}

func (v NullableRealtimeServerEventConversationItemTruncated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeServerEventConversationItemTruncated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


