/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateUploadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUploadRequest{}

// CreateUploadRequest struct for CreateUploadRequest
type CreateUploadRequest struct {
	// The name of the file to upload. 
	Filename string `json:"filename"`
	// The intended purpose of the uploaded file.  See the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose). 
	Purpose string `json:"purpose"`
	// The number of bytes in the file you are uploading. 
	Bytes int32 `json:"bytes"`
	// The MIME type of the file.  This must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision. 
	MimeType string `json:"mime_type"`
}

type _CreateUploadRequest CreateUploadRequest

// NewCreateUploadRequest instantiates a new CreateUploadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUploadRequest(filename string, purpose string, bytes int32, mimeType string) *CreateUploadRequest {
	this := CreateUploadRequest{}
	this.Filename = filename
	this.Purpose = purpose
	this.Bytes = bytes
	this.MimeType = mimeType
	return &this
}

// NewCreateUploadRequestWithDefaults instantiates a new CreateUploadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUploadRequestWithDefaults() *CreateUploadRequest {
	this := CreateUploadRequest{}
	return &this
}

// GetFilename returns the Filename field value
func (o *CreateUploadRequest) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *CreateUploadRequest) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *CreateUploadRequest) SetFilename(v string) {
	o.Filename = v
}

// GetPurpose returns the Purpose field value
func (o *CreateUploadRequest) GetPurpose() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value
// and a boolean to check if the value has been set.
func (o *CreateUploadRequest) GetPurposeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Purpose, true
}

// SetPurpose sets field value
func (o *CreateUploadRequest) SetPurpose(v string) {
	o.Purpose = v
}

// GetBytes returns the Bytes field value
func (o *CreateUploadRequest) GetBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value
// and a boolean to check if the value has been set.
func (o *CreateUploadRequest) GetBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bytes, true
}

// SetBytes sets field value
func (o *CreateUploadRequest) SetBytes(v int32) {
	o.Bytes = v
}

// GetMimeType returns the MimeType field value
func (o *CreateUploadRequest) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *CreateUploadRequest) GetMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *CreateUploadRequest) SetMimeType(v string) {
	o.MimeType = v
}

func (o CreateUploadRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUploadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filename"] = o.Filename
	toSerialize["purpose"] = o.Purpose
	toSerialize["bytes"] = o.Bytes
	toSerialize["mime_type"] = o.MimeType
	return toSerialize, nil
}

func (o *CreateUploadRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filename",
		"purpose",
		"bytes",
		"mime_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateUploadRequest := _CreateUploadRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateUploadRequest)

	if err != nil {
		return err
	}

	*o = CreateUploadRequest(varCreateUploadRequest)

	return err
}

type NullableCreateUploadRequest struct {
	value *CreateUploadRequest
	isSet bool
}

func (v NullableCreateUploadRequest) Get() *CreateUploadRequest {
	return v.value
}

func (v *NullableCreateUploadRequest) Set(val *CreateUploadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUploadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUploadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUploadRequest(val *CreateUploadRequest) *NullableCreateUploadRequest {
	return &NullableCreateUploadRequest{value: val, isSet: true}
}

func (v NullableCreateUploadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUploadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


