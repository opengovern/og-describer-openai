/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssistantToolsFileSearch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssistantToolsFileSearch{}

// AssistantToolsFileSearch struct for AssistantToolsFileSearch
type AssistantToolsFileSearch struct {
	// The type of tool being defined: `file_search`
	Type string `json:"type"`
	FileSearch *AssistantToolsFileSearchFileSearch `json:"file_search,omitempty"`
}

type _AssistantToolsFileSearch AssistantToolsFileSearch

// NewAssistantToolsFileSearch instantiates a new AssistantToolsFileSearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssistantToolsFileSearch(type_ string) *AssistantToolsFileSearch {
	this := AssistantToolsFileSearch{}
	this.Type = type_
	return &this
}

// NewAssistantToolsFileSearchWithDefaults instantiates a new AssistantToolsFileSearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssistantToolsFileSearchWithDefaults() *AssistantToolsFileSearch {
	this := AssistantToolsFileSearch{}
	return &this
}

// GetType returns the Type field value
func (o *AssistantToolsFileSearch) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AssistantToolsFileSearch) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AssistantToolsFileSearch) SetType(v string) {
	o.Type = v
}

// GetFileSearch returns the FileSearch field value if set, zero value otherwise.
func (o *AssistantToolsFileSearch) GetFileSearch() AssistantToolsFileSearchFileSearch {
	if o == nil || IsNil(o.FileSearch) {
		var ret AssistantToolsFileSearchFileSearch
		return ret
	}
	return *o.FileSearch
}

// GetFileSearchOk returns a tuple with the FileSearch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AssistantToolsFileSearch) GetFileSearchOk() (*AssistantToolsFileSearchFileSearch, bool) {
	if o == nil || IsNil(o.FileSearch) {
		return nil, false
	}
	return o.FileSearch, true
}

// HasFileSearch returns a boolean if a field has been set.
func (o *AssistantToolsFileSearch) HasFileSearch() bool {
	if o != nil && !IsNil(o.FileSearch) {
		return true
	}

	return false
}

// SetFileSearch gets a reference to the given AssistantToolsFileSearchFileSearch and assigns it to the FileSearch field.
func (o *AssistantToolsFileSearch) SetFileSearch(v AssistantToolsFileSearchFileSearch) {
	o.FileSearch = &v
}

func (o AssistantToolsFileSearch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssistantToolsFileSearch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.FileSearch) {
		toSerialize["file_search"] = o.FileSearch
	}
	return toSerialize, nil
}

func (o *AssistantToolsFileSearch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssistantToolsFileSearch := _AssistantToolsFileSearch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssistantToolsFileSearch)

	if err != nil {
		return err
	}

	*o = AssistantToolsFileSearch(varAssistantToolsFileSearch)

	return err
}

type NullableAssistantToolsFileSearch struct {
	value *AssistantToolsFileSearch
	isSet bool
}

func (v NullableAssistantToolsFileSearch) Get() *AssistantToolsFileSearch {
	return v.value
}

func (v *NullableAssistantToolsFileSearch) Set(val *AssistantToolsFileSearch) {
	v.value = val
	v.isSet = true
}

func (v NullableAssistantToolsFileSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableAssistantToolsFileSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssistantToolsFileSearch(val *AssistantToolsFileSearch) *NullableAssistantToolsFileSearch {
	return &NullableAssistantToolsFileSearch{value: val, isSet: true}
}

func (v NullableAssistantToolsFileSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssistantToolsFileSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


