/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RealtimeConversationItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeConversationItem{}

// RealtimeConversationItem The item to add to the conversation.
type RealtimeConversationItem struct {
	// The unique ID of the item, this can be generated by the client to help manage server-side context, but is not required because the server will generate one if not provided.
	Id *string `json:"id,omitempty"`
	// The type of the item (`message`, `function_call`, `function_call_output`).
	Type *string `json:"type,omitempty"`
	// The status of the item (`completed`, `incomplete`). These have no effect on the conversation, but are accepted for consistency with the `conversation.item.created` event.
	Status *string `json:"status,omitempty"`
	// The role of the message sender (`user`, `assistant`, `system`), only applicable for `message` items.
	Role *string `json:"role,omitempty"`
	// The content of the message, applicable for `message` items. Message items with a role of `system` support only `input_text` content, message items of role `user` support `input_text` and `input_audio` content, and message items of role `assistant` support `text` content.
	Content []RealtimeConversationItemContentInner `json:"content,omitempty"`
	// The ID of the function call (for `function_call` and `function_call_output` items). If passed on a `function_call_output` item, the server will check that a `function_call` item with the same ID exists in the conversation history.
	CallId *string `json:"call_id,omitempty"`
	// The name of the function being called (for `function_call` items).
	Name *string `json:"name,omitempty"`
	// The arguments of the function call (for `function_call` items).
	Arguments *string `json:"arguments,omitempty"`
	// The output of the function call (for `function_call_output` items).
	Output *string `json:"output,omitempty"`
}

// NewRealtimeConversationItem instantiates a new RealtimeConversationItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeConversationItem() *RealtimeConversationItem {
	this := RealtimeConversationItem{}
	return &this
}

// NewRealtimeConversationItemWithDefaults instantiates a new RealtimeConversationItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeConversationItemWithDefaults() *RealtimeConversationItem {
	this := RealtimeConversationItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RealtimeConversationItem) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeConversationItem) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RealtimeConversationItem) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RealtimeConversationItem) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *RealtimeConversationItem) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeConversationItem) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *RealtimeConversationItem) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *RealtimeConversationItem) SetType(v string) {
	o.Type = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *RealtimeConversationItem) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeConversationItem) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *RealtimeConversationItem) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *RealtimeConversationItem) SetStatus(v string) {
	o.Status = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *RealtimeConversationItem) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeConversationItem) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *RealtimeConversationItem) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *RealtimeConversationItem) SetRole(v string) {
	o.Role = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *RealtimeConversationItem) GetContent() []RealtimeConversationItemContentInner {
	if o == nil || IsNil(o.Content) {
		var ret []RealtimeConversationItemContentInner
		return ret
	}
	return o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeConversationItem) GetContentOk() ([]RealtimeConversationItemContentInner, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *RealtimeConversationItem) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given []RealtimeConversationItemContentInner and assigns it to the Content field.
func (o *RealtimeConversationItem) SetContent(v []RealtimeConversationItemContentInner) {
	o.Content = v
}

// GetCallId returns the CallId field value if set, zero value otherwise.
func (o *RealtimeConversationItem) GetCallId() string {
	if o == nil || IsNil(o.CallId) {
		var ret string
		return ret
	}
	return *o.CallId
}

// GetCallIdOk returns a tuple with the CallId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeConversationItem) GetCallIdOk() (*string, bool) {
	if o == nil || IsNil(o.CallId) {
		return nil, false
	}
	return o.CallId, true
}

// HasCallId returns a boolean if a field has been set.
func (o *RealtimeConversationItem) HasCallId() bool {
	if o != nil && !IsNil(o.CallId) {
		return true
	}

	return false
}

// SetCallId gets a reference to the given string and assigns it to the CallId field.
func (o *RealtimeConversationItem) SetCallId(v string) {
	o.CallId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RealtimeConversationItem) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeConversationItem) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RealtimeConversationItem) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RealtimeConversationItem) SetName(v string) {
	o.Name = &v
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *RealtimeConversationItem) GetArguments() string {
	if o == nil || IsNil(o.Arguments) {
		var ret string
		return ret
	}
	return *o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeConversationItem) GetArgumentsOk() (*string, bool) {
	if o == nil || IsNil(o.Arguments) {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *RealtimeConversationItem) HasArguments() bool {
	if o != nil && !IsNil(o.Arguments) {
		return true
	}

	return false
}

// SetArguments gets a reference to the given string and assigns it to the Arguments field.
func (o *RealtimeConversationItem) SetArguments(v string) {
	o.Arguments = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *RealtimeConversationItem) GetOutput() string {
	if o == nil || IsNil(o.Output) {
		var ret string
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RealtimeConversationItem) GetOutputOk() (*string, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *RealtimeConversationItem) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given string and assigns it to the Output field.
func (o *RealtimeConversationItem) SetOutput(v string) {
	o.Output = &v
}

func (o RealtimeConversationItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeConversationItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.CallId) {
		toSerialize["call_id"] = o.CallId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Arguments) {
		toSerialize["arguments"] = o.Arguments
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	return toSerialize, nil
}

type NullableRealtimeConversationItem struct {
	value *RealtimeConversationItem
	isSet bool
}

func (v NullableRealtimeConversationItem) Get() *RealtimeConversationItem {
	return v.value
}

func (v *NullableRealtimeConversationItem) Set(val *RealtimeConversationItem) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeConversationItem) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeConversationItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeConversationItem(val *RealtimeConversationItem) *NullableRealtimeConversationItem {
	return &NullableRealtimeConversationItem{value: val, isSet: true}
}

func (v NullableRealtimeConversationItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeConversationItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


