/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProjectUserUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectUserUpdateRequest{}

// ProjectUserUpdateRequest struct for ProjectUserUpdateRequest
type ProjectUserUpdateRequest struct {
	// `owner` or `member`
	Role string `json:"role"`
}

type _ProjectUserUpdateRequest ProjectUserUpdateRequest

// NewProjectUserUpdateRequest instantiates a new ProjectUserUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectUserUpdateRequest(role string) *ProjectUserUpdateRequest {
	this := ProjectUserUpdateRequest{}
	this.Role = role
	return &this
}

// NewProjectUserUpdateRequestWithDefaults instantiates a new ProjectUserUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectUserUpdateRequestWithDefaults() *ProjectUserUpdateRequest {
	this := ProjectUserUpdateRequest{}
	return &this
}

// GetRole returns the Role field value
func (o *ProjectUserUpdateRequest) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *ProjectUserUpdateRequest) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *ProjectUserUpdateRequest) SetRole(v string) {
	o.Role = v
}

func (o ProjectUserUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectUserUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["role"] = o.Role
	return toSerialize, nil
}

func (o *ProjectUserUpdateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectUserUpdateRequest := _ProjectUserUpdateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectUserUpdateRequest)

	if err != nil {
		return err
	}

	*o = ProjectUserUpdateRequest(varProjectUserUpdateRequest)

	return err
}

type NullableProjectUserUpdateRequest struct {
	value *ProjectUserUpdateRequest
	isSet bool
}

func (v NullableProjectUserUpdateRequest) Get() *ProjectUserUpdateRequest {
	return v.value
}

func (v *NullableProjectUserUpdateRequest) Set(val *ProjectUserUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectUserUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectUserUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectUserUpdateRequest(val *ProjectUserUpdateRequest) *NullableProjectUserUpdateRequest {
	return &NullableProjectUserUpdateRequest{value: val, isSet: true}
}

func (v NullableProjectUserUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectUserUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


