/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateVectorStoreFileBatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateVectorStoreFileBatchRequest{}

// CreateVectorStoreFileBatchRequest struct for CreateVectorStoreFileBatchRequest
type CreateVectorStoreFileBatchRequest struct {
	// A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
	FileIds []string `json:"file_ids"`
	ChunkingStrategy *ChunkingStrategyRequestParam `json:"chunking_strategy,omitempty"`
}

type _CreateVectorStoreFileBatchRequest CreateVectorStoreFileBatchRequest

// NewCreateVectorStoreFileBatchRequest instantiates a new CreateVectorStoreFileBatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVectorStoreFileBatchRequest(fileIds []string) *CreateVectorStoreFileBatchRequest {
	this := CreateVectorStoreFileBatchRequest{}
	this.FileIds = fileIds
	return &this
}

// NewCreateVectorStoreFileBatchRequestWithDefaults instantiates a new CreateVectorStoreFileBatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVectorStoreFileBatchRequestWithDefaults() *CreateVectorStoreFileBatchRequest {
	this := CreateVectorStoreFileBatchRequest{}
	return &this
}

// GetFileIds returns the FileIds field value
func (o *CreateVectorStoreFileBatchRequest) GetFileIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.FileIds
}

// GetFileIdsOk returns a tuple with the FileIds field value
// and a boolean to check if the value has been set.
func (o *CreateVectorStoreFileBatchRequest) GetFileIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileIds, true
}

// SetFileIds sets field value
func (o *CreateVectorStoreFileBatchRequest) SetFileIds(v []string) {
	o.FileIds = v
}

// GetChunkingStrategy returns the ChunkingStrategy field value if set, zero value otherwise.
func (o *CreateVectorStoreFileBatchRequest) GetChunkingStrategy() ChunkingStrategyRequestParam {
	if o == nil || IsNil(o.ChunkingStrategy) {
		var ret ChunkingStrategyRequestParam
		return ret
	}
	return *o.ChunkingStrategy
}

// GetChunkingStrategyOk returns a tuple with the ChunkingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVectorStoreFileBatchRequest) GetChunkingStrategyOk() (*ChunkingStrategyRequestParam, bool) {
	if o == nil || IsNil(o.ChunkingStrategy) {
		return nil, false
	}
	return o.ChunkingStrategy, true
}

// HasChunkingStrategy returns a boolean if a field has been set.
func (o *CreateVectorStoreFileBatchRequest) HasChunkingStrategy() bool {
	if o != nil && !IsNil(o.ChunkingStrategy) {
		return true
	}

	return false
}

// SetChunkingStrategy gets a reference to the given ChunkingStrategyRequestParam and assigns it to the ChunkingStrategy field.
func (o *CreateVectorStoreFileBatchRequest) SetChunkingStrategy(v ChunkingStrategyRequestParam) {
	o.ChunkingStrategy = &v
}

func (o CreateVectorStoreFileBatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateVectorStoreFileBatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file_ids"] = o.FileIds
	if !IsNil(o.ChunkingStrategy) {
		toSerialize["chunking_strategy"] = o.ChunkingStrategy
	}
	return toSerialize, nil
}

func (o *CreateVectorStoreFileBatchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file_ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateVectorStoreFileBatchRequest := _CreateVectorStoreFileBatchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateVectorStoreFileBatchRequest)

	if err != nil {
		return err
	}

	*o = CreateVectorStoreFileBatchRequest(varCreateVectorStoreFileBatchRequest)

	return err
}

type NullableCreateVectorStoreFileBatchRequest struct {
	value *CreateVectorStoreFileBatchRequest
	isSet bool
}

func (v NullableCreateVectorStoreFileBatchRequest) Get() *CreateVectorStoreFileBatchRequest {
	return v.value
}

func (v *NullableCreateVectorStoreFileBatchRequest) Set(val *CreateVectorStoreFileBatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVectorStoreFileBatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVectorStoreFileBatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVectorStoreFileBatchRequest(val *CreateVectorStoreFileBatchRequest) *NullableCreateVectorStoreFileBatchRequest {
	return &NullableCreateVectorStoreFileBatchRequest{value: val, isSet: true}
}

func (v NullableCreateVectorStoreFileBatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVectorStoreFileBatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


