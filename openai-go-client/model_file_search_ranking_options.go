/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FileSearchRankingOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileSearchRankingOptions{}

// FileSearchRankingOptions The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.  See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information. 
type FileSearchRankingOptions struct {
	// The ranker to use for the file search. If not specified will use the `auto` ranker.
	Ranker *string `json:"ranker,omitempty"`
	// The score threshold for the file search. All values must be a floating point number between 0 and 1.
	ScoreThreshold float32 `json:"score_threshold"`
}

type _FileSearchRankingOptions FileSearchRankingOptions

// NewFileSearchRankingOptions instantiates a new FileSearchRankingOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileSearchRankingOptions(scoreThreshold float32) *FileSearchRankingOptions {
	this := FileSearchRankingOptions{}
	this.ScoreThreshold = scoreThreshold
	return &this
}

// NewFileSearchRankingOptionsWithDefaults instantiates a new FileSearchRankingOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileSearchRankingOptionsWithDefaults() *FileSearchRankingOptions {
	this := FileSearchRankingOptions{}
	return &this
}

// GetRanker returns the Ranker field value if set, zero value otherwise.
func (o *FileSearchRankingOptions) GetRanker() string {
	if o == nil || IsNil(o.Ranker) {
		var ret string
		return ret
	}
	return *o.Ranker
}

// GetRankerOk returns a tuple with the Ranker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSearchRankingOptions) GetRankerOk() (*string, bool) {
	if o == nil || IsNil(o.Ranker) {
		return nil, false
	}
	return o.Ranker, true
}

// HasRanker returns a boolean if a field has been set.
func (o *FileSearchRankingOptions) HasRanker() bool {
	if o != nil && !IsNil(o.Ranker) {
		return true
	}

	return false
}

// SetRanker gets a reference to the given string and assigns it to the Ranker field.
func (o *FileSearchRankingOptions) SetRanker(v string) {
	o.Ranker = &v
}

// GetScoreThreshold returns the ScoreThreshold field value
func (o *FileSearchRankingOptions) GetScoreThreshold() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.ScoreThreshold
}

// GetScoreThresholdOk returns a tuple with the ScoreThreshold field value
// and a boolean to check if the value has been set.
func (o *FileSearchRankingOptions) GetScoreThresholdOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScoreThreshold, true
}

// SetScoreThreshold sets field value
func (o *FileSearchRankingOptions) SetScoreThreshold(v float32) {
	o.ScoreThreshold = v
}

func (o FileSearchRankingOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileSearchRankingOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ranker) {
		toSerialize["ranker"] = o.Ranker
	}
	toSerialize["score_threshold"] = o.ScoreThreshold
	return toSerialize, nil
}

func (o *FileSearchRankingOptions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"score_threshold",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileSearchRankingOptions := _FileSearchRankingOptions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileSearchRankingOptions)

	if err != nil {
		return err
	}

	*o = FileSearchRankingOptions(varFileSearchRankingOptions)

	return err
}

type NullableFileSearchRankingOptions struct {
	value *FileSearchRankingOptions
	isSet bool
}

func (v NullableFileSearchRankingOptions) Get() *FileSearchRankingOptions {
	return v.value
}

func (v *NullableFileSearchRankingOptions) Set(val *FileSearchRankingOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSearchRankingOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSearchRankingOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSearchRankingOptions(val *FileSearchRankingOptions) *NullableFileSearchRankingOptions {
	return &NullableFileSearchRankingOptions{value: val, isSet: true}
}

func (v NullableFileSearchRankingOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSearchRankingOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


