/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProjectServiceAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectServiceAccount{}

// ProjectServiceAccount Represents an individual service account in a project.
type ProjectServiceAccount struct {
	// The object type, which is always `organization.project.service_account`
	Object string `json:"object"`
	// The identifier, which can be referenced in API endpoints
	Id string `json:"id"`
	// The name of the service account
	Name string `json:"name"`
	// `owner` or `member`
	Role string `json:"role"`
	// The Unix timestamp (in seconds) of when the service account was created
	CreatedAt int32 `json:"created_at"`
}

type _ProjectServiceAccount ProjectServiceAccount

// NewProjectServiceAccount instantiates a new ProjectServiceAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectServiceAccount(object string, id string, name string, role string, createdAt int32) *ProjectServiceAccount {
	this := ProjectServiceAccount{}
	this.Object = object
	this.Id = id
	this.Name = name
	this.Role = role
	this.CreatedAt = createdAt
	return &this
}

// NewProjectServiceAccountWithDefaults instantiates a new ProjectServiceAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectServiceAccountWithDefaults() *ProjectServiceAccount {
	this := ProjectServiceAccount{}
	return &this
}

// GetObject returns the Object field value
func (o *ProjectServiceAccount) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *ProjectServiceAccount) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *ProjectServiceAccount) SetObject(v string) {
	o.Object = v
}

// GetId returns the Id field value
func (o *ProjectServiceAccount) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProjectServiceAccount) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProjectServiceAccount) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ProjectServiceAccount) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProjectServiceAccount) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProjectServiceAccount) SetName(v string) {
	o.Name = v
}

// GetRole returns the Role field value
func (o *ProjectServiceAccount) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *ProjectServiceAccount) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *ProjectServiceAccount) SetRole(v string) {
	o.Role = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ProjectServiceAccount) GetCreatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ProjectServiceAccount) GetCreatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ProjectServiceAccount) SetCreatedAt(v int32) {
	o.CreatedAt = v
}

func (o ProjectServiceAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectServiceAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["object"] = o.Object
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["role"] = o.Role
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *ProjectServiceAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object",
		"id",
		"name",
		"role",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProjectServiceAccount := _ProjectServiceAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProjectServiceAccount)

	if err != nil {
		return err
	}

	*o = ProjectServiceAccount(varProjectServiceAccount)

	return err
}

type NullableProjectServiceAccount struct {
	value *ProjectServiceAccount
	isSet bool
}

func (v NullableProjectServiceAccount) Get() *ProjectServiceAccount {
	return v.value
}

func (v *NullableProjectServiceAccount) Set(val *ProjectServiceAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectServiceAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectServiceAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectServiceAccount(val *ProjectServiceAccount) *NullableProjectServiceAccount {
	return &NullableProjectServiceAccount{value: val, isSet: true}
}

func (v NullableProjectServiceAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectServiceAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


