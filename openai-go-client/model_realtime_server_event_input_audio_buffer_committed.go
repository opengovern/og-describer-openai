/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RealtimeServerEventInputAudioBufferCommitted type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RealtimeServerEventInputAudioBufferCommitted{}

// RealtimeServerEventInputAudioBufferCommitted Returned when an input audio buffer is committed, either by the client or automatically in server VAD mode. The `item_id` property is the ID of the user message item that will be created, thus a `conversation.item.created` event will also be sent to the client.
type RealtimeServerEventInputAudioBufferCommitted struct {
	// The unique ID of the server event.
	EventId string `json:"event_id"`
	// The event type, must be `input_audio_buffer.committed`.
	Type string `json:"type"`
	// The ID of the preceding item after which the new item will be inserted.
	PreviousItemId string `json:"previous_item_id"`
	// The ID of the user message item that will be created.
	ItemId string `json:"item_id"`
}

type _RealtimeServerEventInputAudioBufferCommitted RealtimeServerEventInputAudioBufferCommitted

// NewRealtimeServerEventInputAudioBufferCommitted instantiates a new RealtimeServerEventInputAudioBufferCommitted object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRealtimeServerEventInputAudioBufferCommitted(eventId string, type_ string, previousItemId string, itemId string) *RealtimeServerEventInputAudioBufferCommitted {
	this := RealtimeServerEventInputAudioBufferCommitted{}
	this.EventId = eventId
	this.Type = type_
	this.PreviousItemId = previousItemId
	this.ItemId = itemId
	return &this
}

// NewRealtimeServerEventInputAudioBufferCommittedWithDefaults instantiates a new RealtimeServerEventInputAudioBufferCommitted object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRealtimeServerEventInputAudioBufferCommittedWithDefaults() *RealtimeServerEventInputAudioBufferCommitted {
	this := RealtimeServerEventInputAudioBufferCommitted{}
	return &this
}

// GetEventId returns the EventId field value
func (o *RealtimeServerEventInputAudioBufferCommitted) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventInputAudioBufferCommitted) GetEventIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *RealtimeServerEventInputAudioBufferCommitted) SetEventId(v string) {
	o.EventId = v
}

// GetType returns the Type field value
func (o *RealtimeServerEventInputAudioBufferCommitted) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventInputAudioBufferCommitted) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RealtimeServerEventInputAudioBufferCommitted) SetType(v string) {
	o.Type = v
}

// GetPreviousItemId returns the PreviousItemId field value
func (o *RealtimeServerEventInputAudioBufferCommitted) GetPreviousItemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PreviousItemId
}

// GetPreviousItemIdOk returns a tuple with the PreviousItemId field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventInputAudioBufferCommitted) GetPreviousItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PreviousItemId, true
}

// SetPreviousItemId sets field value
func (o *RealtimeServerEventInputAudioBufferCommitted) SetPreviousItemId(v string) {
	o.PreviousItemId = v
}

// GetItemId returns the ItemId field value
func (o *RealtimeServerEventInputAudioBufferCommitted) GetItemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value
// and a boolean to check if the value has been set.
func (o *RealtimeServerEventInputAudioBufferCommitted) GetItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemId, true
}

// SetItemId sets field value
func (o *RealtimeServerEventInputAudioBufferCommitted) SetItemId(v string) {
	o.ItemId = v
}

func (o RealtimeServerEventInputAudioBufferCommitted) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RealtimeServerEventInputAudioBufferCommitted) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["event_id"] = o.EventId
	toSerialize["type"] = o.Type
	toSerialize["previous_item_id"] = o.PreviousItemId
	toSerialize["item_id"] = o.ItemId
	return toSerialize, nil
}

func (o *RealtimeServerEventInputAudioBufferCommitted) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"event_id",
		"type",
		"previous_item_id",
		"item_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRealtimeServerEventInputAudioBufferCommitted := _RealtimeServerEventInputAudioBufferCommitted{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRealtimeServerEventInputAudioBufferCommitted)

	if err != nil {
		return err
	}

	*o = RealtimeServerEventInputAudioBufferCommitted(varRealtimeServerEventInputAudioBufferCommitted)

	return err
}

type NullableRealtimeServerEventInputAudioBufferCommitted struct {
	value *RealtimeServerEventInputAudioBufferCommitted
	isSet bool
}

func (v NullableRealtimeServerEventInputAudioBufferCommitted) Get() *RealtimeServerEventInputAudioBufferCommitted {
	return v.value
}

func (v *NullableRealtimeServerEventInputAudioBufferCommitted) Set(val *RealtimeServerEventInputAudioBufferCommitted) {
	v.value = val
	v.isSet = true
}

func (v NullableRealtimeServerEventInputAudioBufferCommitted) IsSet() bool {
	return v.isSet
}

func (v *NullableRealtimeServerEventInputAudioBufferCommitted) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRealtimeServerEventInputAudioBufferCommitted(val *RealtimeServerEventInputAudioBufferCommitted) *NullableRealtimeServerEventInputAudioBufferCommitted {
	return &NullableRealtimeServerEventInputAudioBufferCommitted{value: val, isSet: true}
}

func (v NullableRealtimeServerEventInputAudioBufferCommitted) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRealtimeServerEventInputAudioBufferCommitted) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


