/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ChatCompletionStreamOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatCompletionStreamOptions{}

// ChatCompletionStreamOptions Options for streaming response. Only set this when you set `stream: true`. 
type ChatCompletionStreamOptions struct {
	// If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value. 
	IncludeUsage *bool `json:"include_usage,omitempty"`
}

// NewChatCompletionStreamOptions instantiates a new ChatCompletionStreamOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatCompletionStreamOptions() *ChatCompletionStreamOptions {
	this := ChatCompletionStreamOptions{}
	return &this
}

// NewChatCompletionStreamOptionsWithDefaults instantiates a new ChatCompletionStreamOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatCompletionStreamOptionsWithDefaults() *ChatCompletionStreamOptions {
	this := ChatCompletionStreamOptions{}
	return &this
}

// GetIncludeUsage returns the IncludeUsage field value if set, zero value otherwise.
func (o *ChatCompletionStreamOptions) GetIncludeUsage() bool {
	if o == nil || IsNil(o.IncludeUsage) {
		var ret bool
		return ret
	}
	return *o.IncludeUsage
}

// GetIncludeUsageOk returns a tuple with the IncludeUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionStreamOptions) GetIncludeUsageOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeUsage) {
		return nil, false
	}
	return o.IncludeUsage, true
}

// HasIncludeUsage returns a boolean if a field has been set.
func (o *ChatCompletionStreamOptions) HasIncludeUsage() bool {
	if o != nil && !IsNil(o.IncludeUsage) {
		return true
	}

	return false
}

// SetIncludeUsage gets a reference to the given bool and assigns it to the IncludeUsage field.
func (o *ChatCompletionStreamOptions) SetIncludeUsage(v bool) {
	o.IncludeUsage = &v
}

func (o ChatCompletionStreamOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatCompletionStreamOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IncludeUsage) {
		toSerialize["include_usage"] = o.IncludeUsage
	}
	return toSerialize, nil
}

type NullableChatCompletionStreamOptions struct {
	value *ChatCompletionStreamOptions
	isSet bool
}

func (v NullableChatCompletionStreamOptions) Get() *ChatCompletionStreamOptions {
	return v.value
}

func (v *NullableChatCompletionStreamOptions) Set(val *ChatCompletionStreamOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableChatCompletionStreamOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableChatCompletionStreamOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatCompletionStreamOptions(val *ChatCompletionStreamOptions) *NullableChatCompletionStreamOptions {
	return &NullableChatCompletionStreamOptions{value: val, isSet: true}
}

func (v NullableChatCompletionStreamOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatCompletionStreamOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


