/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VectorStoreFileObjectLastError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VectorStoreFileObjectLastError{}

// VectorStoreFileObjectLastError The last error associated with this vector store file. Will be `null` if there are no errors.
type VectorStoreFileObjectLastError struct {
	// One of `server_error` or `rate_limit_exceeded`.
	Code string `json:"code"`
	// A human-readable description of the error.
	Message string `json:"message"`
}

type _VectorStoreFileObjectLastError VectorStoreFileObjectLastError

// NewVectorStoreFileObjectLastError instantiates a new VectorStoreFileObjectLastError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVectorStoreFileObjectLastError(code string, message string) *VectorStoreFileObjectLastError {
	this := VectorStoreFileObjectLastError{}
	this.Code = code
	this.Message = message
	return &this
}

// NewVectorStoreFileObjectLastErrorWithDefaults instantiates a new VectorStoreFileObjectLastError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVectorStoreFileObjectLastErrorWithDefaults() *VectorStoreFileObjectLastError {
	this := VectorStoreFileObjectLastError{}
	return &this
}

// GetCode returns the Code field value
func (o *VectorStoreFileObjectLastError) GetCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Code
}

// GetCodeOk returns a tuple with the Code field value
// and a boolean to check if the value has been set.
func (o *VectorStoreFileObjectLastError) GetCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Code, true
}

// SetCode sets field value
func (o *VectorStoreFileObjectLastError) SetCode(v string) {
	o.Code = v
}

// GetMessage returns the Message field value
func (o *VectorStoreFileObjectLastError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *VectorStoreFileObjectLastError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *VectorStoreFileObjectLastError) SetMessage(v string) {
	o.Message = v
}

func (o VectorStoreFileObjectLastError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VectorStoreFileObjectLastError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["code"] = o.Code
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *VectorStoreFileObjectLastError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"code",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVectorStoreFileObjectLastError := _VectorStoreFileObjectLastError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVectorStoreFileObjectLastError)

	if err != nil {
		return err
	}

	*o = VectorStoreFileObjectLastError(varVectorStoreFileObjectLastError)

	return err
}

type NullableVectorStoreFileObjectLastError struct {
	value *VectorStoreFileObjectLastError
	isSet bool
}

func (v NullableVectorStoreFileObjectLastError) Get() *VectorStoreFileObjectLastError {
	return v.value
}

func (v *NullableVectorStoreFileObjectLastError) Set(val *VectorStoreFileObjectLastError) {
	v.value = val
	v.isSet = true
}

func (v NullableVectorStoreFileObjectLastError) IsSet() bool {
	return v.isSet
}

func (v *NullableVectorStoreFileObjectLastError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVectorStoreFileObjectLastError(val *VectorStoreFileObjectLastError) *NullableVectorStoreFileObjectLastError {
	return &NullableVectorStoreFileObjectLastError{value: val, isSet: true}
}

func (v NullableVectorStoreFileObjectLastError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVectorStoreFileObjectLastError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


