/*
OpenAI API

The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.

API version: 2.3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateVectorStoreRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateVectorStoreRequest{}

// CreateVectorStoreRequest struct for CreateVectorStoreRequest
type CreateVectorStoreRequest struct {
	// A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
	FileIds []string `json:"file_ids,omitempty"`
	// The name of the vector store.
	Name *string `json:"name,omitempty"`
	ExpiresAfter *VectorStoreExpirationAfter `json:"expires_after,omitempty"`
	ChunkingStrategy *CreateVectorStoreRequestChunkingStrategy `json:"chunking_strategy,omitempty"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maximum of 512 characters long. 
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// NewCreateVectorStoreRequest instantiates a new CreateVectorStoreRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVectorStoreRequest() *CreateVectorStoreRequest {
	this := CreateVectorStoreRequest{}
	return &this
}

// NewCreateVectorStoreRequestWithDefaults instantiates a new CreateVectorStoreRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVectorStoreRequestWithDefaults() *CreateVectorStoreRequest {
	this := CreateVectorStoreRequest{}
	return &this
}

// GetFileIds returns the FileIds field value if set, zero value otherwise.
func (o *CreateVectorStoreRequest) GetFileIds() []string {
	if o == nil || IsNil(o.FileIds) {
		var ret []string
		return ret
	}
	return o.FileIds
}

// GetFileIdsOk returns a tuple with the FileIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVectorStoreRequest) GetFileIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.FileIds) {
		return nil, false
	}
	return o.FileIds, true
}

// HasFileIds returns a boolean if a field has been set.
func (o *CreateVectorStoreRequest) HasFileIds() bool {
	if o != nil && !IsNil(o.FileIds) {
		return true
	}

	return false
}

// SetFileIds gets a reference to the given []string and assigns it to the FileIds field.
func (o *CreateVectorStoreRequest) SetFileIds(v []string) {
	o.FileIds = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CreateVectorStoreRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVectorStoreRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CreateVectorStoreRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CreateVectorStoreRequest) SetName(v string) {
	o.Name = &v
}

// GetExpiresAfter returns the ExpiresAfter field value if set, zero value otherwise.
func (o *CreateVectorStoreRequest) GetExpiresAfter() VectorStoreExpirationAfter {
	if o == nil || IsNil(o.ExpiresAfter) {
		var ret VectorStoreExpirationAfter
		return ret
	}
	return *o.ExpiresAfter
}

// GetExpiresAfterOk returns a tuple with the ExpiresAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVectorStoreRequest) GetExpiresAfterOk() (*VectorStoreExpirationAfter, bool) {
	if o == nil || IsNil(o.ExpiresAfter) {
		return nil, false
	}
	return o.ExpiresAfter, true
}

// HasExpiresAfter returns a boolean if a field has been set.
func (o *CreateVectorStoreRequest) HasExpiresAfter() bool {
	if o != nil && !IsNil(o.ExpiresAfter) {
		return true
	}

	return false
}

// SetExpiresAfter gets a reference to the given VectorStoreExpirationAfter and assigns it to the ExpiresAfter field.
func (o *CreateVectorStoreRequest) SetExpiresAfter(v VectorStoreExpirationAfter) {
	o.ExpiresAfter = &v
}

// GetChunkingStrategy returns the ChunkingStrategy field value if set, zero value otherwise.
func (o *CreateVectorStoreRequest) GetChunkingStrategy() CreateVectorStoreRequestChunkingStrategy {
	if o == nil || IsNil(o.ChunkingStrategy) {
		var ret CreateVectorStoreRequestChunkingStrategy
		return ret
	}
	return *o.ChunkingStrategy
}

// GetChunkingStrategyOk returns a tuple with the ChunkingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVectorStoreRequest) GetChunkingStrategyOk() (*CreateVectorStoreRequestChunkingStrategy, bool) {
	if o == nil || IsNil(o.ChunkingStrategy) {
		return nil, false
	}
	return o.ChunkingStrategy, true
}

// HasChunkingStrategy returns a boolean if a field has been set.
func (o *CreateVectorStoreRequest) HasChunkingStrategy() bool {
	if o != nil && !IsNil(o.ChunkingStrategy) {
		return true
	}

	return false
}

// SetChunkingStrategy gets a reference to the given CreateVectorStoreRequestChunkingStrategy and assigns it to the ChunkingStrategy field.
func (o *CreateVectorStoreRequest) SetChunkingStrategy(v CreateVectorStoreRequestChunkingStrategy) {
	o.ChunkingStrategy = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateVectorStoreRequest) GetMetadata() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateVectorStoreRequest) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CreateVectorStoreRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *CreateVectorStoreRequest) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o CreateVectorStoreRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateVectorStoreRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileIds) {
		toSerialize["file_ids"] = o.FileIds
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ExpiresAfter) {
		toSerialize["expires_after"] = o.ExpiresAfter
	}
	if !IsNil(o.ChunkingStrategy) {
		toSerialize["chunking_strategy"] = o.ChunkingStrategy
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableCreateVectorStoreRequest struct {
	value *CreateVectorStoreRequest
	isSet bool
}

func (v NullableCreateVectorStoreRequest) Get() *CreateVectorStoreRequest {
	return v.value
}

func (v *NullableCreateVectorStoreRequest) Set(val *CreateVectorStoreRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVectorStoreRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVectorStoreRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVectorStoreRequest(val *CreateVectorStoreRequest) *NullableCreateVectorStoreRequest {
	return &NullableCreateVectorStoreRequest{value: val, isSet: true}
}

func (v NullableCreateVectorStoreRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVectorStoreRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


